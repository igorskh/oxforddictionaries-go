/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// LexicalEntry Description of an entry for a particular part of speech
type LexicalEntry struct {
	// A list of written or spoken words
	Compounds *[]map[string]interface{} `json:"compounds,omitempty"`
	// A list of written or spoken words
	DerivativeOf *[]map[string]interface{} `json:"derivativeOf,omitempty"`
	// A list of written or spoken words
	Derivatives *[]map[string]interface{} `json:"derivatives,omitempty"`
	Entries *[]Entry `json:"entries,omitempty"`
	// The different forms are correlated with meanings or functions which we text as 'features'
	GrammaticalFeatures *[]map[string]interface{} `json:"grammaticalFeatures,omitempty"`
	// IANA language code
	Language string `json:"language"`
	LexicalCategory LexicalCategory `json:"lexicalCategory"`
	// various types of notes that appear
	Notes *[]map[string]interface{} `json:"notes,omitempty"`
	// A list of written or spoken words
	PhrasalVerbs *[]map[string]interface{} `json:"phrasalVerbs,omitempty"`
	// A list of written or spoken words
	Phrases *[]map[string]interface{} `json:"phrases,omitempty"`
	// A list of possible pronunciations of a word
	Pronunciations *[]map[string]interface{} `json:"pronunciations,omitempty"`
	// Abstract root form from which this lexicalEntry is derived.
	Root *string `json:"root,omitempty"`
	// A given written or spoken realisation of an entry.
	Text string `json:"text"`
	// Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'
	VariantForms *[]map[string]interface{} `json:"variantForms,omitempty"`
}

// NewLexicalEntry instantiates a new LexicalEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLexicalEntry(language string, lexicalCategory LexicalCategory, text string) *LexicalEntry {
	this := LexicalEntry{}
	this.Language = language
	this.LexicalCategory = lexicalCategory
	this.Text = text
	return &this
}

// NewLexicalEntryWithDefaults instantiates a new LexicalEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLexicalEntryWithDefaults() *LexicalEntry {
	this := LexicalEntry{}
	return &this
}

// GetCompounds returns the Compounds field value if set, zero value otherwise.
func (o *LexicalEntry) GetCompounds() []map[string]interface{} {
	if o == nil || o.Compounds == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Compounds
}

// GetCompoundsOk returns a tuple with the Compounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetCompoundsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Compounds == nil {
		return nil, false
	}
	return o.Compounds, true
}

// HasCompounds returns a boolean if a field has been set.
func (o *LexicalEntry) HasCompounds() bool {
	if o != nil && o.Compounds != nil {
		return true
	}

	return false
}

// SetCompounds gets a reference to the given []map[string]interface{} and assigns it to the Compounds field.
func (o *LexicalEntry) SetCompounds(v []map[string]interface{}) {
	o.Compounds = &v
}

// GetDerivativeOf returns the DerivativeOf field value if set, zero value otherwise.
func (o *LexicalEntry) GetDerivativeOf() []map[string]interface{} {
	if o == nil || o.DerivativeOf == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.DerivativeOf
}

// GetDerivativeOfOk returns a tuple with the DerivativeOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetDerivativeOfOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.DerivativeOf == nil {
		return nil, false
	}
	return o.DerivativeOf, true
}

// HasDerivativeOf returns a boolean if a field has been set.
func (o *LexicalEntry) HasDerivativeOf() bool {
	if o != nil && o.DerivativeOf != nil {
		return true
	}

	return false
}

// SetDerivativeOf gets a reference to the given []map[string]interface{} and assigns it to the DerivativeOf field.
func (o *LexicalEntry) SetDerivativeOf(v []map[string]interface{}) {
	o.DerivativeOf = &v
}

// GetDerivatives returns the Derivatives field value if set, zero value otherwise.
func (o *LexicalEntry) GetDerivatives() []map[string]interface{} {
	if o == nil || o.Derivatives == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Derivatives
}

// GetDerivativesOk returns a tuple with the Derivatives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetDerivativesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Derivatives == nil {
		return nil, false
	}
	return o.Derivatives, true
}

// HasDerivatives returns a boolean if a field has been set.
func (o *LexicalEntry) HasDerivatives() bool {
	if o != nil && o.Derivatives != nil {
		return true
	}

	return false
}

// SetDerivatives gets a reference to the given []map[string]interface{} and assigns it to the Derivatives field.
func (o *LexicalEntry) SetDerivatives(v []map[string]interface{}) {
	o.Derivatives = &v
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *LexicalEntry) GetEntries() []Entry {
	if o == nil || o.Entries == nil {
		var ret []Entry
		return ret
	}
	return *o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetEntriesOk() (*[]Entry, bool) {
	if o == nil || o.Entries == nil {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *LexicalEntry) HasEntries() bool {
	if o != nil && o.Entries != nil {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []Entry and assigns it to the Entries field.
func (o *LexicalEntry) SetEntries(v []Entry) {
	o.Entries = &v
}

// GetGrammaticalFeatures returns the GrammaticalFeatures field value if set, zero value otherwise.
func (o *LexicalEntry) GetGrammaticalFeatures() []map[string]interface{} {
	if o == nil || o.GrammaticalFeatures == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.GrammaticalFeatures
}

// GetGrammaticalFeaturesOk returns a tuple with the GrammaticalFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetGrammaticalFeaturesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.GrammaticalFeatures == nil {
		return nil, false
	}
	return o.GrammaticalFeatures, true
}

// HasGrammaticalFeatures returns a boolean if a field has been set.
func (o *LexicalEntry) HasGrammaticalFeatures() bool {
	if o != nil && o.GrammaticalFeatures != nil {
		return true
	}

	return false
}

// SetGrammaticalFeatures gets a reference to the given []map[string]interface{} and assigns it to the GrammaticalFeatures field.
func (o *LexicalEntry) SetGrammaticalFeatures(v []map[string]interface{}) {
	o.GrammaticalFeatures = &v
}

// GetLanguage returns the Language field value
func (o *LexicalEntry) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *LexicalEntry) SetLanguage(v string) {
	o.Language = v
}

// GetLexicalCategory returns the LexicalCategory field value
func (o *LexicalEntry) GetLexicalCategory() LexicalCategory {
	if o == nil {
		var ret LexicalCategory
		return ret
	}

	return o.LexicalCategory
}

// GetLexicalCategoryOk returns a tuple with the LexicalCategory field value
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetLexicalCategoryOk() (*LexicalCategory, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LexicalCategory, true
}

// SetLexicalCategory sets field value
func (o *LexicalEntry) SetLexicalCategory(v LexicalCategory) {
	o.LexicalCategory = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *LexicalEntry) GetNotes() []map[string]interface{} {
	if o == nil || o.Notes == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetNotesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *LexicalEntry) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []map[string]interface{} and assigns it to the Notes field.
func (o *LexicalEntry) SetNotes(v []map[string]interface{}) {
	o.Notes = &v
}

// GetPhrasalVerbs returns the PhrasalVerbs field value if set, zero value otherwise.
func (o *LexicalEntry) GetPhrasalVerbs() []map[string]interface{} {
	if o == nil || o.PhrasalVerbs == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.PhrasalVerbs
}

// GetPhrasalVerbsOk returns a tuple with the PhrasalVerbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetPhrasalVerbsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.PhrasalVerbs == nil {
		return nil, false
	}
	return o.PhrasalVerbs, true
}

// HasPhrasalVerbs returns a boolean if a field has been set.
func (o *LexicalEntry) HasPhrasalVerbs() bool {
	if o != nil && o.PhrasalVerbs != nil {
		return true
	}

	return false
}

// SetPhrasalVerbs gets a reference to the given []map[string]interface{} and assigns it to the PhrasalVerbs field.
func (o *LexicalEntry) SetPhrasalVerbs(v []map[string]interface{}) {
	o.PhrasalVerbs = &v
}

// GetPhrases returns the Phrases field value if set, zero value otherwise.
func (o *LexicalEntry) GetPhrases() []map[string]interface{} {
	if o == nil || o.Phrases == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Phrases
}

// GetPhrasesOk returns a tuple with the Phrases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetPhrasesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Phrases == nil {
		return nil, false
	}
	return o.Phrases, true
}

// HasPhrases returns a boolean if a field has been set.
func (o *LexicalEntry) HasPhrases() bool {
	if o != nil && o.Phrases != nil {
		return true
	}

	return false
}

// SetPhrases gets a reference to the given []map[string]interface{} and assigns it to the Phrases field.
func (o *LexicalEntry) SetPhrases(v []map[string]interface{}) {
	o.Phrases = &v
}

// GetPronunciations returns the Pronunciations field value if set, zero value otherwise.
func (o *LexicalEntry) GetPronunciations() []map[string]interface{} {
	if o == nil || o.Pronunciations == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Pronunciations
}

// GetPronunciationsOk returns a tuple with the Pronunciations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetPronunciationsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Pronunciations == nil {
		return nil, false
	}
	return o.Pronunciations, true
}

// HasPronunciations returns a boolean if a field has been set.
func (o *LexicalEntry) HasPronunciations() bool {
	if o != nil && o.Pronunciations != nil {
		return true
	}

	return false
}

// SetPronunciations gets a reference to the given []map[string]interface{} and assigns it to the Pronunciations field.
func (o *LexicalEntry) SetPronunciations(v []map[string]interface{}) {
	o.Pronunciations = &v
}

// GetRoot returns the Root field value if set, zero value otherwise.
func (o *LexicalEntry) GetRoot() string {
	if o == nil || o.Root == nil {
		var ret string
		return ret
	}
	return *o.Root
}

// GetRootOk returns a tuple with the Root field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetRootOk() (*string, bool) {
	if o == nil || o.Root == nil {
		return nil, false
	}
	return o.Root, true
}

// HasRoot returns a boolean if a field has been set.
func (o *LexicalEntry) HasRoot() bool {
	if o != nil && o.Root != nil {
		return true
	}

	return false
}

// SetRoot gets a reference to the given string and assigns it to the Root field.
func (o *LexicalEntry) SetRoot(v string) {
	o.Root = &v
}

// GetText returns the Text field value
func (o *LexicalEntry) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *LexicalEntry) SetText(v string) {
	o.Text = v
}

// GetVariantForms returns the VariantForms field value if set, zero value otherwise.
func (o *LexicalEntry) GetVariantForms() []map[string]interface{} {
	if o == nil || o.VariantForms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.VariantForms
}

// GetVariantFormsOk returns a tuple with the VariantForms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LexicalEntry) GetVariantFormsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.VariantForms == nil {
		return nil, false
	}
	return o.VariantForms, true
}

// HasVariantForms returns a boolean if a field has been set.
func (o *LexicalEntry) HasVariantForms() bool {
	if o != nil && o.VariantForms != nil {
		return true
	}

	return false
}

// SetVariantForms gets a reference to the given []map[string]interface{} and assigns it to the VariantForms field.
func (o *LexicalEntry) SetVariantForms(v []map[string]interface{}) {
	o.VariantForms = &v
}

func (o LexicalEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Compounds != nil {
		toSerialize["compounds"] = o.Compounds
	}
	if o.DerivativeOf != nil {
		toSerialize["derivativeOf"] = o.DerivativeOf
	}
	if o.Derivatives != nil {
		toSerialize["derivatives"] = o.Derivatives
	}
	if o.Entries != nil {
		toSerialize["entries"] = o.Entries
	}
	if o.GrammaticalFeatures != nil {
		toSerialize["grammaticalFeatures"] = o.GrammaticalFeatures
	}
	if true {
		toSerialize["language"] = o.Language
	}
	if true {
		toSerialize["lexicalCategory"] = o.LexicalCategory
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	if o.PhrasalVerbs != nil {
		toSerialize["phrasalVerbs"] = o.PhrasalVerbs
	}
	if o.Phrases != nil {
		toSerialize["phrases"] = o.Phrases
	}
	if o.Pronunciations != nil {
		toSerialize["pronunciations"] = o.Pronunciations
	}
	if o.Root != nil {
		toSerialize["root"] = o.Root
	}
	if true {
		toSerialize["text"] = o.Text
	}
	if o.VariantForms != nil {
		toSerialize["variantForms"] = o.VariantForms
	}
	return json.Marshal(toSerialize)
}

type NullableLexicalEntry struct {
	value *LexicalEntry
	isSet bool
}

func (v NullableLexicalEntry) Get() *LexicalEntry {
	return v.value
}

func (v *NullableLexicalEntry) Set(val *LexicalEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableLexicalEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableLexicalEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLexicalEntry(val *LexicalEntry) *NullableLexicalEntry {
	return &NullableLexicalEntry{value: val, isSet: true}
}

func (v NullableLexicalEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLexicalEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



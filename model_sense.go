/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// Sense A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element
type Sense struct {
	Antonyms *[]map[string]interface{} `json:"antonyms,omitempty"`
	// A construction provides information about typical syntax used of this sense. Each construction may optionally have one or more examples.
	Constructions *[]SenseConstructions `json:"constructions,omitempty"`
	CrossReferenceMarkers *[]string `json:"crossReferenceMarkers,omitempty"`
	// A reference to another word that is closely related, might provide additional information about the subject, has a variant spelling or is an abbreviated form of it.
	CrossReferences *[]map[string]interface{} `json:"crossReferences,omitempty"`
	Definitions *[]string `json:"definitions,omitempty"`
	DomainClasses *DomainClassesList `json:"domainClasses,omitempty"`
	Domains *DomainsList `json:"domains,omitempty"`
	Etymologies *[]string `json:"etymologies,omitempty"`
	// A list of written or spoken rendering of examples of use of a word or text
	Examples *[]map[string]interface{} `json:"examples,omitempty"`
	// The id of the sense that is required for the delete procedure
	Id *string `json:"id,omitempty"`
	// A list of inflected forms for a sense.
	Inflections *[]InflectedForm `json:"inflections,omitempty"`
	// various types of notes that appear
	Notes *[]map[string]interface{} `json:"notes,omitempty"`
	// A list of possible pronunciations of a word
	Pronunciations *[]map[string]interface{} `json:"pronunciations,omitempty"`
	Regions *RegionsList `json:"regions,omitempty"`
	Registers *RegistersList `json:"registers,omitempty"`
	SemanticClasses *SemanticClassesList `json:"semanticClasses,omitempty"`
	ShortDefinitions *[]string `json:"shortDefinitions,omitempty"`
	// Ordered list of subsenses of a sense
	Subsenses *[]Sense `json:"subsenses,omitempty"`
	Synonyms *[]map[string]interface{} `json:"synonyms,omitempty"`
	// Ordered list of links to the Thesaurus Dictionary
	ThesaurusLinks *[]ThesaurusLink `json:"thesaurusLinks,omitempty"`
	// Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'
	VariantForms *[]map[string]interface{} `json:"variantForms,omitempty"`
}

// NewSense instantiates a new Sense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSense() *Sense {
	this := Sense{}
	return &this
}

// NewSenseWithDefaults instantiates a new Sense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSenseWithDefaults() *Sense {
	this := Sense{}
	return &this
}

// GetAntonyms returns the Antonyms field value if set, zero value otherwise.
func (o *Sense) GetAntonyms() []map[string]interface{} {
	if o == nil || o.Antonyms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Antonyms
}

// GetAntonymsOk returns a tuple with the Antonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetAntonymsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Antonyms == nil {
		return nil, false
	}
	return o.Antonyms, true
}

// HasAntonyms returns a boolean if a field has been set.
func (o *Sense) HasAntonyms() bool {
	if o != nil && o.Antonyms != nil {
		return true
	}

	return false
}

// SetAntonyms gets a reference to the given []map[string]interface{} and assigns it to the Antonyms field.
func (o *Sense) SetAntonyms(v []map[string]interface{}) {
	o.Antonyms = &v
}

// GetConstructions returns the Constructions field value if set, zero value otherwise.
func (o *Sense) GetConstructions() []SenseConstructions {
	if o == nil || o.Constructions == nil {
		var ret []SenseConstructions
		return ret
	}
	return *o.Constructions
}

// GetConstructionsOk returns a tuple with the Constructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetConstructionsOk() (*[]SenseConstructions, bool) {
	if o == nil || o.Constructions == nil {
		return nil, false
	}
	return o.Constructions, true
}

// HasConstructions returns a boolean if a field has been set.
func (o *Sense) HasConstructions() bool {
	if o != nil && o.Constructions != nil {
		return true
	}

	return false
}

// SetConstructions gets a reference to the given []SenseConstructions and assigns it to the Constructions field.
func (o *Sense) SetConstructions(v []SenseConstructions) {
	o.Constructions = &v
}

// GetCrossReferenceMarkers returns the CrossReferenceMarkers field value if set, zero value otherwise.
func (o *Sense) GetCrossReferenceMarkers() []string {
	if o == nil || o.CrossReferenceMarkers == nil {
		var ret []string
		return ret
	}
	return *o.CrossReferenceMarkers
}

// GetCrossReferenceMarkersOk returns a tuple with the CrossReferenceMarkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetCrossReferenceMarkersOk() (*[]string, bool) {
	if o == nil || o.CrossReferenceMarkers == nil {
		return nil, false
	}
	return o.CrossReferenceMarkers, true
}

// HasCrossReferenceMarkers returns a boolean if a field has been set.
func (o *Sense) HasCrossReferenceMarkers() bool {
	if o != nil && o.CrossReferenceMarkers != nil {
		return true
	}

	return false
}

// SetCrossReferenceMarkers gets a reference to the given []string and assigns it to the CrossReferenceMarkers field.
func (o *Sense) SetCrossReferenceMarkers(v []string) {
	o.CrossReferenceMarkers = &v
}

// GetCrossReferences returns the CrossReferences field value if set, zero value otherwise.
func (o *Sense) GetCrossReferences() []map[string]interface{} {
	if o == nil || o.CrossReferences == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.CrossReferences
}

// GetCrossReferencesOk returns a tuple with the CrossReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetCrossReferencesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.CrossReferences == nil {
		return nil, false
	}
	return o.CrossReferences, true
}

// HasCrossReferences returns a boolean if a field has been set.
func (o *Sense) HasCrossReferences() bool {
	if o != nil && o.CrossReferences != nil {
		return true
	}

	return false
}

// SetCrossReferences gets a reference to the given []map[string]interface{} and assigns it to the CrossReferences field.
func (o *Sense) SetCrossReferences(v []map[string]interface{}) {
	o.CrossReferences = &v
}

// GetDefinitions returns the Definitions field value if set, zero value otherwise.
func (o *Sense) GetDefinitions() []string {
	if o == nil || o.Definitions == nil {
		var ret []string
		return ret
	}
	return *o.Definitions
}

// GetDefinitionsOk returns a tuple with the Definitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetDefinitionsOk() (*[]string, bool) {
	if o == nil || o.Definitions == nil {
		return nil, false
	}
	return o.Definitions, true
}

// HasDefinitions returns a boolean if a field has been set.
func (o *Sense) HasDefinitions() bool {
	if o != nil && o.Definitions != nil {
		return true
	}

	return false
}

// SetDefinitions gets a reference to the given []string and assigns it to the Definitions field.
func (o *Sense) SetDefinitions(v []string) {
	o.Definitions = &v
}

// GetDomainClasses returns the DomainClasses field value if set, zero value otherwise.
func (o *Sense) GetDomainClasses() DomainClassesList {
	if o == nil || o.DomainClasses == nil {
		var ret DomainClassesList
		return ret
	}
	return *o.DomainClasses
}

// GetDomainClassesOk returns a tuple with the DomainClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetDomainClassesOk() (*DomainClassesList, bool) {
	if o == nil || o.DomainClasses == nil {
		return nil, false
	}
	return o.DomainClasses, true
}

// HasDomainClasses returns a boolean if a field has been set.
func (o *Sense) HasDomainClasses() bool {
	if o != nil && o.DomainClasses != nil {
		return true
	}

	return false
}

// SetDomainClasses gets a reference to the given DomainClassesList and assigns it to the DomainClasses field.
func (o *Sense) SetDomainClasses(v DomainClassesList) {
	o.DomainClasses = &v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *Sense) GetDomains() DomainsList {
	if o == nil || o.Domains == nil {
		var ret DomainsList
		return ret
	}
	return *o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetDomainsOk() (*DomainsList, bool) {
	if o == nil || o.Domains == nil {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *Sense) HasDomains() bool {
	if o != nil && o.Domains != nil {
		return true
	}

	return false
}

// SetDomains gets a reference to the given DomainsList and assigns it to the Domains field.
func (o *Sense) SetDomains(v DomainsList) {
	o.Domains = &v
}

// GetEtymologies returns the Etymologies field value if set, zero value otherwise.
func (o *Sense) GetEtymologies() []string {
	if o == nil || o.Etymologies == nil {
		var ret []string
		return ret
	}
	return *o.Etymologies
}

// GetEtymologiesOk returns a tuple with the Etymologies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetEtymologiesOk() (*[]string, bool) {
	if o == nil || o.Etymologies == nil {
		return nil, false
	}
	return o.Etymologies, true
}

// HasEtymologies returns a boolean if a field has been set.
func (o *Sense) HasEtymologies() bool {
	if o != nil && o.Etymologies != nil {
		return true
	}

	return false
}

// SetEtymologies gets a reference to the given []string and assigns it to the Etymologies field.
func (o *Sense) SetEtymologies(v []string) {
	o.Etymologies = &v
}

// GetExamples returns the Examples field value if set, zero value otherwise.
func (o *Sense) GetExamples() []map[string]interface{} {
	if o == nil || o.Examples == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Examples
}

// GetExamplesOk returns a tuple with the Examples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetExamplesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Examples == nil {
		return nil, false
	}
	return o.Examples, true
}

// HasExamples returns a boolean if a field has been set.
func (o *Sense) HasExamples() bool {
	if o != nil && o.Examples != nil {
		return true
	}

	return false
}

// SetExamples gets a reference to the given []map[string]interface{} and assigns it to the Examples field.
func (o *Sense) SetExamples(v []map[string]interface{}) {
	o.Examples = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Sense) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Sense) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Sense) SetId(v string) {
	o.Id = &v
}

// GetInflections returns the Inflections field value if set, zero value otherwise.
func (o *Sense) GetInflections() []InflectedForm {
	if o == nil || o.Inflections == nil {
		var ret []InflectedForm
		return ret
	}
	return *o.Inflections
}

// GetInflectionsOk returns a tuple with the Inflections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetInflectionsOk() (*[]InflectedForm, bool) {
	if o == nil || o.Inflections == nil {
		return nil, false
	}
	return o.Inflections, true
}

// HasInflections returns a boolean if a field has been set.
func (o *Sense) HasInflections() bool {
	if o != nil && o.Inflections != nil {
		return true
	}

	return false
}

// SetInflections gets a reference to the given []InflectedForm and assigns it to the Inflections field.
func (o *Sense) SetInflections(v []InflectedForm) {
	o.Inflections = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Sense) GetNotes() []map[string]interface{} {
	if o == nil || o.Notes == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetNotesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Sense) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []map[string]interface{} and assigns it to the Notes field.
func (o *Sense) SetNotes(v []map[string]interface{}) {
	o.Notes = &v
}

// GetPronunciations returns the Pronunciations field value if set, zero value otherwise.
func (o *Sense) GetPronunciations() []map[string]interface{} {
	if o == nil || o.Pronunciations == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Pronunciations
}

// GetPronunciationsOk returns a tuple with the Pronunciations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetPronunciationsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Pronunciations == nil {
		return nil, false
	}
	return o.Pronunciations, true
}

// HasPronunciations returns a boolean if a field has been set.
func (o *Sense) HasPronunciations() bool {
	if o != nil && o.Pronunciations != nil {
		return true
	}

	return false
}

// SetPronunciations gets a reference to the given []map[string]interface{} and assigns it to the Pronunciations field.
func (o *Sense) SetPronunciations(v []map[string]interface{}) {
	o.Pronunciations = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *Sense) GetRegions() RegionsList {
	if o == nil || o.Regions == nil {
		var ret RegionsList
		return ret
	}
	return *o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetRegionsOk() (*RegionsList, bool) {
	if o == nil || o.Regions == nil {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *Sense) HasRegions() bool {
	if o != nil && o.Regions != nil {
		return true
	}

	return false
}

// SetRegions gets a reference to the given RegionsList and assigns it to the Regions field.
func (o *Sense) SetRegions(v RegionsList) {
	o.Regions = &v
}

// GetRegisters returns the Registers field value if set, zero value otherwise.
func (o *Sense) GetRegisters() RegistersList {
	if o == nil || o.Registers == nil {
		var ret RegistersList
		return ret
	}
	return *o.Registers
}

// GetRegistersOk returns a tuple with the Registers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetRegistersOk() (*RegistersList, bool) {
	if o == nil || o.Registers == nil {
		return nil, false
	}
	return o.Registers, true
}

// HasRegisters returns a boolean if a field has been set.
func (o *Sense) HasRegisters() bool {
	if o != nil && o.Registers != nil {
		return true
	}

	return false
}

// SetRegisters gets a reference to the given RegistersList and assigns it to the Registers field.
func (o *Sense) SetRegisters(v RegistersList) {
	o.Registers = &v
}

// GetSemanticClasses returns the SemanticClasses field value if set, zero value otherwise.
func (o *Sense) GetSemanticClasses() SemanticClassesList {
	if o == nil || o.SemanticClasses == nil {
		var ret SemanticClassesList
		return ret
	}
	return *o.SemanticClasses
}

// GetSemanticClassesOk returns a tuple with the SemanticClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetSemanticClassesOk() (*SemanticClassesList, bool) {
	if o == nil || o.SemanticClasses == nil {
		return nil, false
	}
	return o.SemanticClasses, true
}

// HasSemanticClasses returns a boolean if a field has been set.
func (o *Sense) HasSemanticClasses() bool {
	if o != nil && o.SemanticClasses != nil {
		return true
	}

	return false
}

// SetSemanticClasses gets a reference to the given SemanticClassesList and assigns it to the SemanticClasses field.
func (o *Sense) SetSemanticClasses(v SemanticClassesList) {
	o.SemanticClasses = &v
}

// GetShortDefinitions returns the ShortDefinitions field value if set, zero value otherwise.
func (o *Sense) GetShortDefinitions() []string {
	if o == nil || o.ShortDefinitions == nil {
		var ret []string
		return ret
	}
	return *o.ShortDefinitions
}

// GetShortDefinitionsOk returns a tuple with the ShortDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetShortDefinitionsOk() (*[]string, bool) {
	if o == nil || o.ShortDefinitions == nil {
		return nil, false
	}
	return o.ShortDefinitions, true
}

// HasShortDefinitions returns a boolean if a field has been set.
func (o *Sense) HasShortDefinitions() bool {
	if o != nil && o.ShortDefinitions != nil {
		return true
	}

	return false
}

// SetShortDefinitions gets a reference to the given []string and assigns it to the ShortDefinitions field.
func (o *Sense) SetShortDefinitions(v []string) {
	o.ShortDefinitions = &v
}

// GetSubsenses returns the Subsenses field value if set, zero value otherwise.
func (o *Sense) GetSubsenses() []Sense {
	if o == nil || o.Subsenses == nil {
		var ret []Sense
		return ret
	}
	return *o.Subsenses
}

// GetSubsensesOk returns a tuple with the Subsenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetSubsensesOk() (*[]Sense, bool) {
	if o == nil || o.Subsenses == nil {
		return nil, false
	}
	return o.Subsenses, true
}

// HasSubsenses returns a boolean if a field has been set.
func (o *Sense) HasSubsenses() bool {
	if o != nil && o.Subsenses != nil {
		return true
	}

	return false
}

// SetSubsenses gets a reference to the given []Sense and assigns it to the Subsenses field.
func (o *Sense) SetSubsenses(v []Sense) {
	o.Subsenses = &v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *Sense) GetSynonyms() []map[string]interface{} {
	if o == nil || o.Synonyms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetSynonymsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Synonyms == nil {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *Sense) HasSynonyms() bool {
	if o != nil && o.Synonyms != nil {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given []map[string]interface{} and assigns it to the Synonyms field.
func (o *Sense) SetSynonyms(v []map[string]interface{}) {
	o.Synonyms = &v
}

// GetThesaurusLinks returns the ThesaurusLinks field value if set, zero value otherwise.
func (o *Sense) GetThesaurusLinks() []ThesaurusLink {
	if o == nil || o.ThesaurusLinks == nil {
		var ret []ThesaurusLink
		return ret
	}
	return *o.ThesaurusLinks
}

// GetThesaurusLinksOk returns a tuple with the ThesaurusLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetThesaurusLinksOk() (*[]ThesaurusLink, bool) {
	if o == nil || o.ThesaurusLinks == nil {
		return nil, false
	}
	return o.ThesaurusLinks, true
}

// HasThesaurusLinks returns a boolean if a field has been set.
func (o *Sense) HasThesaurusLinks() bool {
	if o != nil && o.ThesaurusLinks != nil {
		return true
	}

	return false
}

// SetThesaurusLinks gets a reference to the given []ThesaurusLink and assigns it to the ThesaurusLinks field.
func (o *Sense) SetThesaurusLinks(v []ThesaurusLink) {
	o.ThesaurusLinks = &v
}

// GetVariantForms returns the VariantForms field value if set, zero value otherwise.
func (o *Sense) GetVariantForms() []map[string]interface{} {
	if o == nil || o.VariantForms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.VariantForms
}

// GetVariantFormsOk returns a tuple with the VariantForms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sense) GetVariantFormsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.VariantForms == nil {
		return nil, false
	}
	return o.VariantForms, true
}

// HasVariantForms returns a boolean if a field has been set.
func (o *Sense) HasVariantForms() bool {
	if o != nil && o.VariantForms != nil {
		return true
	}

	return false
}

// SetVariantForms gets a reference to the given []map[string]interface{} and assigns it to the VariantForms field.
func (o *Sense) SetVariantForms(v []map[string]interface{}) {
	o.VariantForms = &v
}

func (o Sense) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Antonyms != nil {
		toSerialize["antonyms"] = o.Antonyms
	}
	if o.Constructions != nil {
		toSerialize["constructions"] = o.Constructions
	}
	if o.CrossReferenceMarkers != nil {
		toSerialize["crossReferenceMarkers"] = o.CrossReferenceMarkers
	}
	if o.CrossReferences != nil {
		toSerialize["crossReferences"] = o.CrossReferences
	}
	if o.Definitions != nil {
		toSerialize["definitions"] = o.Definitions
	}
	if o.DomainClasses != nil {
		toSerialize["domainClasses"] = o.DomainClasses
	}
	if o.Domains != nil {
		toSerialize["domains"] = o.Domains
	}
	if o.Etymologies != nil {
		toSerialize["etymologies"] = o.Etymologies
	}
	if o.Examples != nil {
		toSerialize["examples"] = o.Examples
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Inflections != nil {
		toSerialize["inflections"] = o.Inflections
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	if o.Pronunciations != nil {
		toSerialize["pronunciations"] = o.Pronunciations
	}
	if o.Regions != nil {
		toSerialize["regions"] = o.Regions
	}
	if o.Registers != nil {
		toSerialize["registers"] = o.Registers
	}
	if o.SemanticClasses != nil {
		toSerialize["semanticClasses"] = o.SemanticClasses
	}
	if o.ShortDefinitions != nil {
		toSerialize["shortDefinitions"] = o.ShortDefinitions
	}
	if o.Subsenses != nil {
		toSerialize["subsenses"] = o.Subsenses
	}
	if o.Synonyms != nil {
		toSerialize["synonyms"] = o.Synonyms
	}
	if o.ThesaurusLinks != nil {
		toSerialize["thesaurusLinks"] = o.ThesaurusLinks
	}
	if o.VariantForms != nil {
		toSerialize["variantForms"] = o.VariantForms
	}
	return json.Marshal(toSerialize)
}

type NullableSense struct {
	value *Sense
	isSet bool
}

func (v NullableSense) Get() *Sense {
	return v.value
}

func (v *NullableSense) Set(val *Sense) {
	v.value = val
	v.isSet = true
}

func (v NullableSense) IsSet() bool {
	return v.isSet
}

func (v *NullableSense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSense(val *Sense) *NullableSense {
	return &NullableSense{value: val, isSet: true}
}

func (v NullableSense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



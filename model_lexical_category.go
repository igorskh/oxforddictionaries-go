/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// LexicalCategory struct for LexicalCategory
type LexicalCategory struct {
	Id string `json:"id"`
	Text string `json:"text"`
}

// NewLexicalCategory instantiates a new LexicalCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLexicalCategory(id string, text string) *LexicalCategory {
	this := LexicalCategory{}
	this.Id = id
	this.Text = text
	return &this
}

// NewLexicalCategoryWithDefaults instantiates a new LexicalCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLexicalCategoryWithDefaults() *LexicalCategory {
	this := LexicalCategory{}
	return &this
}

// GetId returns the Id field value
func (o *LexicalCategory) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LexicalCategory) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LexicalCategory) SetId(v string) {
	o.Id = v
}

// GetText returns the Text field value
func (o *LexicalCategory) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *LexicalCategory) GetTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *LexicalCategory) SetText(v string) {
	o.Text = v
}

func (o LexicalCategory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableLexicalCategory struct {
	value *LexicalCategory
	isSet bool
}

func (v NullableLexicalCategory) Get() *LexicalCategory {
	return v.value
}

func (v *NullableLexicalCategory) Set(val *LexicalCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableLexicalCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableLexicalCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLexicalCategory(val *LexicalCategory) *NullableLexicalCategory {
	return &NullableLexicalCategory{value: val, isSet: true}
}

func (v NullableLexicalCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLexicalCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



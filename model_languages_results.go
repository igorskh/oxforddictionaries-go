/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// LanguagesResults struct for LanguagesResults
type LanguagesResults struct {
	// Name of region.
	Region *string `json:"region,omitempty"`
	// Name of source dictionary.
	Source *string `json:"source,omitempty"`
	SourceLanguage *LanguagesSourceLanguage `json:"sourceLanguage,omitempty"`
	TargetLanguage *LanguagesTargetLanguage `json:"targetLanguage,omitempty"`
	// whether monolingual or bilingual.
	Type *string `json:"type,omitempty"`
}

// NewLanguagesResults instantiates a new LanguagesResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguagesResults() *LanguagesResults {
	this := LanguagesResults{}
	return &this
}

// NewLanguagesResultsWithDefaults instantiates a new LanguagesResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguagesResultsWithDefaults() *LanguagesResults {
	this := LanguagesResults{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *LanguagesResults) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguagesResults) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *LanguagesResults) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *LanguagesResults) SetRegion(v string) {
	o.Region = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *LanguagesResults) GetSource() string {
	if o == nil || o.Source == nil {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguagesResults) GetSourceOk() (*string, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *LanguagesResults) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *LanguagesResults) SetSource(v string) {
	o.Source = &v
}

// GetSourceLanguage returns the SourceLanguage field value if set, zero value otherwise.
func (o *LanguagesResults) GetSourceLanguage() LanguagesSourceLanguage {
	if o == nil || o.SourceLanguage == nil {
		var ret LanguagesSourceLanguage
		return ret
	}
	return *o.SourceLanguage
}

// GetSourceLanguageOk returns a tuple with the SourceLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguagesResults) GetSourceLanguageOk() (*LanguagesSourceLanguage, bool) {
	if o == nil || o.SourceLanguage == nil {
		return nil, false
	}
	return o.SourceLanguage, true
}

// HasSourceLanguage returns a boolean if a field has been set.
func (o *LanguagesResults) HasSourceLanguage() bool {
	if o != nil && o.SourceLanguage != nil {
		return true
	}

	return false
}

// SetSourceLanguage gets a reference to the given LanguagesSourceLanguage and assigns it to the SourceLanguage field.
func (o *LanguagesResults) SetSourceLanguage(v LanguagesSourceLanguage) {
	o.SourceLanguage = &v
}

// GetTargetLanguage returns the TargetLanguage field value if set, zero value otherwise.
func (o *LanguagesResults) GetTargetLanguage() LanguagesTargetLanguage {
	if o == nil || o.TargetLanguage == nil {
		var ret LanguagesTargetLanguage
		return ret
	}
	return *o.TargetLanguage
}

// GetTargetLanguageOk returns a tuple with the TargetLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguagesResults) GetTargetLanguageOk() (*LanguagesTargetLanguage, bool) {
	if o == nil || o.TargetLanguage == nil {
		return nil, false
	}
	return o.TargetLanguage, true
}

// HasTargetLanguage returns a boolean if a field has been set.
func (o *LanguagesResults) HasTargetLanguage() bool {
	if o != nil && o.TargetLanguage != nil {
		return true
	}

	return false
}

// SetTargetLanguage gets a reference to the given LanguagesTargetLanguage and assigns it to the TargetLanguage field.
func (o *LanguagesResults) SetTargetLanguage(v LanguagesTargetLanguage) {
	o.TargetLanguage = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LanguagesResults) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguagesResults) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LanguagesResults) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LanguagesResults) SetType(v string) {
	o.Type = &v
}

func (o LanguagesResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.SourceLanguage != nil {
		toSerialize["sourceLanguage"] = o.SourceLanguage
	}
	if o.TargetLanguage != nil {
		toSerialize["targetLanguage"] = o.TargetLanguage
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableLanguagesResults struct {
	value *LanguagesResults
	isSet bool
}

func (v NullableLanguagesResults) Get() *LanguagesResults {
	return v.value
}

func (v *NullableLanguagesResults) Set(val *LanguagesResults) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguagesResults) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguagesResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguagesResults(val *LanguagesResults) *NullableLanguagesResults {
	return &NullableLanguagesResults{value: val, isSet: true}
}

func (v NullableLanguagesResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguagesResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



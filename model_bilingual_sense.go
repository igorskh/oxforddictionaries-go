/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// BilingualSense A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element
type BilingualSense struct {
	Antonyms *[]map[string]interface{} `json:"antonyms,omitempty"`
	// A construction provides information about typical syntax used of this sense. Each construction may optionally have one or more examples. Constructions may be translated if there is an equivalent in the target language.
	Constructions *[]BilingualSenseConstructions `json:"constructions,omitempty"`
	CrossReferenceMarkers *[]string `json:"crossReferenceMarkers,omitempty"`
	// A reference to another word that is closely related, might provide additional information about the subject, has a variant spelling or is an abbreviated form of it.
	CrossReferences *[]map[string]interface{} `json:"crossReferences,omitempty"`
	// List of links to entries in other datasets
	DatasetCrossLinks *[]DatasetCrossLink `json:"datasetCrossLinks,omitempty"`
	Definitions *[]string `json:"definitions,omitempty"`
	DomainClasses *DomainClassesList `json:"domainClasses,omitempty"`
	Domains *DomainsList `json:"domains,omitempty"`
	Etymologies *[]string `json:"etymologies,omitempty"`
	// A list of written or spoken rendering of examples of use of a word or text
	Examples *[]map[string]interface{} `json:"examples,omitempty"`
	// The id of the sense that is required for the delete procedure
	Id *string `json:"id,omitempty"`
	// A list of inflected forms for a sense.
	Inflections *[]InflectedForm `json:"inflections,omitempty"`
	// various types of notes that appear
	Notes *[]map[string]interface{} `json:"notes,omitempty"`
	// A list of possible pronunciations of a word
	Pronunciations *[]map[string]interface{} `json:"pronunciations,omitempty"`
	Regions *RegionsList `json:"regions,omitempty"`
	Registers *RegistersList `json:"registers,omitempty"`
	SemanticClasses *SemanticClassesList `json:"semanticClasses,omitempty"`
	ShortDefinitions *[]string `json:"shortDefinitions,omitempty"`
	// Ordered list of subsenses of a sense
	Subsenses *[]BilingualSense `json:"subsenses,omitempty"`
	Synonyms *[]map[string]interface{} `json:"synonyms,omitempty"`
	// Ordered list of links to the Thesaurus Dictionary
	ThesaurusLinks *[]ThesaurusLink `json:"thesaurusLinks,omitempty"`
	// A list of written or spoken rendering of the meaning of a word or text in another language(s)
	Translations *[]map[string]interface{} `json:"translations,omitempty"`
	// Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'
	VariantForms *[]map[string]interface{} `json:"variantForms,omitempty"`
}

// NewBilingualSense instantiates a new BilingualSense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBilingualSense() *BilingualSense {
	this := BilingualSense{}
	return &this
}

// NewBilingualSenseWithDefaults instantiates a new BilingualSense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBilingualSenseWithDefaults() *BilingualSense {
	this := BilingualSense{}
	return &this
}

// GetAntonyms returns the Antonyms field value if set, zero value otherwise.
func (o *BilingualSense) GetAntonyms() []map[string]interface{} {
	if o == nil || o.Antonyms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Antonyms
}

// GetAntonymsOk returns a tuple with the Antonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetAntonymsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Antonyms == nil {
		return nil, false
	}
	return o.Antonyms, true
}

// HasAntonyms returns a boolean if a field has been set.
func (o *BilingualSense) HasAntonyms() bool {
	if o != nil && o.Antonyms != nil {
		return true
	}

	return false
}

// SetAntonyms gets a reference to the given []map[string]interface{} and assigns it to the Antonyms field.
func (o *BilingualSense) SetAntonyms(v []map[string]interface{}) {
	o.Antonyms = &v
}

// GetConstructions returns the Constructions field value if set, zero value otherwise.
func (o *BilingualSense) GetConstructions() []BilingualSenseConstructions {
	if o == nil || o.Constructions == nil {
		var ret []BilingualSenseConstructions
		return ret
	}
	return *o.Constructions
}

// GetConstructionsOk returns a tuple with the Constructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetConstructionsOk() (*[]BilingualSenseConstructions, bool) {
	if o == nil || o.Constructions == nil {
		return nil, false
	}
	return o.Constructions, true
}

// HasConstructions returns a boolean if a field has been set.
func (o *BilingualSense) HasConstructions() bool {
	if o != nil && o.Constructions != nil {
		return true
	}

	return false
}

// SetConstructions gets a reference to the given []BilingualSenseConstructions and assigns it to the Constructions field.
func (o *BilingualSense) SetConstructions(v []BilingualSenseConstructions) {
	o.Constructions = &v
}

// GetCrossReferenceMarkers returns the CrossReferenceMarkers field value if set, zero value otherwise.
func (o *BilingualSense) GetCrossReferenceMarkers() []string {
	if o == nil || o.CrossReferenceMarkers == nil {
		var ret []string
		return ret
	}
	return *o.CrossReferenceMarkers
}

// GetCrossReferenceMarkersOk returns a tuple with the CrossReferenceMarkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetCrossReferenceMarkersOk() (*[]string, bool) {
	if o == nil || o.CrossReferenceMarkers == nil {
		return nil, false
	}
	return o.CrossReferenceMarkers, true
}

// HasCrossReferenceMarkers returns a boolean if a field has been set.
func (o *BilingualSense) HasCrossReferenceMarkers() bool {
	if o != nil && o.CrossReferenceMarkers != nil {
		return true
	}

	return false
}

// SetCrossReferenceMarkers gets a reference to the given []string and assigns it to the CrossReferenceMarkers field.
func (o *BilingualSense) SetCrossReferenceMarkers(v []string) {
	o.CrossReferenceMarkers = &v
}

// GetCrossReferences returns the CrossReferences field value if set, zero value otherwise.
func (o *BilingualSense) GetCrossReferences() []map[string]interface{} {
	if o == nil || o.CrossReferences == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.CrossReferences
}

// GetCrossReferencesOk returns a tuple with the CrossReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetCrossReferencesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.CrossReferences == nil {
		return nil, false
	}
	return o.CrossReferences, true
}

// HasCrossReferences returns a boolean if a field has been set.
func (o *BilingualSense) HasCrossReferences() bool {
	if o != nil && o.CrossReferences != nil {
		return true
	}

	return false
}

// SetCrossReferences gets a reference to the given []map[string]interface{} and assigns it to the CrossReferences field.
func (o *BilingualSense) SetCrossReferences(v []map[string]interface{}) {
	o.CrossReferences = &v
}

// GetDatasetCrossLinks returns the DatasetCrossLinks field value if set, zero value otherwise.
func (o *BilingualSense) GetDatasetCrossLinks() []DatasetCrossLink {
	if o == nil || o.DatasetCrossLinks == nil {
		var ret []DatasetCrossLink
		return ret
	}
	return *o.DatasetCrossLinks
}

// GetDatasetCrossLinksOk returns a tuple with the DatasetCrossLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetDatasetCrossLinksOk() (*[]DatasetCrossLink, bool) {
	if o == nil || o.DatasetCrossLinks == nil {
		return nil, false
	}
	return o.DatasetCrossLinks, true
}

// HasDatasetCrossLinks returns a boolean if a field has been set.
func (o *BilingualSense) HasDatasetCrossLinks() bool {
	if o != nil && o.DatasetCrossLinks != nil {
		return true
	}

	return false
}

// SetDatasetCrossLinks gets a reference to the given []DatasetCrossLink and assigns it to the DatasetCrossLinks field.
func (o *BilingualSense) SetDatasetCrossLinks(v []DatasetCrossLink) {
	o.DatasetCrossLinks = &v
}

// GetDefinitions returns the Definitions field value if set, zero value otherwise.
func (o *BilingualSense) GetDefinitions() []string {
	if o == nil || o.Definitions == nil {
		var ret []string
		return ret
	}
	return *o.Definitions
}

// GetDefinitionsOk returns a tuple with the Definitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetDefinitionsOk() (*[]string, bool) {
	if o == nil || o.Definitions == nil {
		return nil, false
	}
	return o.Definitions, true
}

// HasDefinitions returns a boolean if a field has been set.
func (o *BilingualSense) HasDefinitions() bool {
	if o != nil && o.Definitions != nil {
		return true
	}

	return false
}

// SetDefinitions gets a reference to the given []string and assigns it to the Definitions field.
func (o *BilingualSense) SetDefinitions(v []string) {
	o.Definitions = &v
}

// GetDomainClasses returns the DomainClasses field value if set, zero value otherwise.
func (o *BilingualSense) GetDomainClasses() DomainClassesList {
	if o == nil || o.DomainClasses == nil {
		var ret DomainClassesList
		return ret
	}
	return *o.DomainClasses
}

// GetDomainClassesOk returns a tuple with the DomainClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetDomainClassesOk() (*DomainClassesList, bool) {
	if o == nil || o.DomainClasses == nil {
		return nil, false
	}
	return o.DomainClasses, true
}

// HasDomainClasses returns a boolean if a field has been set.
func (o *BilingualSense) HasDomainClasses() bool {
	if o != nil && o.DomainClasses != nil {
		return true
	}

	return false
}

// SetDomainClasses gets a reference to the given DomainClassesList and assigns it to the DomainClasses field.
func (o *BilingualSense) SetDomainClasses(v DomainClassesList) {
	o.DomainClasses = &v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *BilingualSense) GetDomains() DomainsList {
	if o == nil || o.Domains == nil {
		var ret DomainsList
		return ret
	}
	return *o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetDomainsOk() (*DomainsList, bool) {
	if o == nil || o.Domains == nil {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *BilingualSense) HasDomains() bool {
	if o != nil && o.Domains != nil {
		return true
	}

	return false
}

// SetDomains gets a reference to the given DomainsList and assigns it to the Domains field.
func (o *BilingualSense) SetDomains(v DomainsList) {
	o.Domains = &v
}

// GetEtymologies returns the Etymologies field value if set, zero value otherwise.
func (o *BilingualSense) GetEtymologies() []string {
	if o == nil || o.Etymologies == nil {
		var ret []string
		return ret
	}
	return *o.Etymologies
}

// GetEtymologiesOk returns a tuple with the Etymologies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetEtymologiesOk() (*[]string, bool) {
	if o == nil || o.Etymologies == nil {
		return nil, false
	}
	return o.Etymologies, true
}

// HasEtymologies returns a boolean if a field has been set.
func (o *BilingualSense) HasEtymologies() bool {
	if o != nil && o.Etymologies != nil {
		return true
	}

	return false
}

// SetEtymologies gets a reference to the given []string and assigns it to the Etymologies field.
func (o *BilingualSense) SetEtymologies(v []string) {
	o.Etymologies = &v
}

// GetExamples returns the Examples field value if set, zero value otherwise.
func (o *BilingualSense) GetExamples() []map[string]interface{} {
	if o == nil || o.Examples == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Examples
}

// GetExamplesOk returns a tuple with the Examples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetExamplesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Examples == nil {
		return nil, false
	}
	return o.Examples, true
}

// HasExamples returns a boolean if a field has been set.
func (o *BilingualSense) HasExamples() bool {
	if o != nil && o.Examples != nil {
		return true
	}

	return false
}

// SetExamples gets a reference to the given []map[string]interface{} and assigns it to the Examples field.
func (o *BilingualSense) SetExamples(v []map[string]interface{}) {
	o.Examples = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BilingualSense) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BilingualSense) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BilingualSense) SetId(v string) {
	o.Id = &v
}

// GetInflections returns the Inflections field value if set, zero value otherwise.
func (o *BilingualSense) GetInflections() []InflectedForm {
	if o == nil || o.Inflections == nil {
		var ret []InflectedForm
		return ret
	}
	return *o.Inflections
}

// GetInflectionsOk returns a tuple with the Inflections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetInflectionsOk() (*[]InflectedForm, bool) {
	if o == nil || o.Inflections == nil {
		return nil, false
	}
	return o.Inflections, true
}

// HasInflections returns a boolean if a field has been set.
func (o *BilingualSense) HasInflections() bool {
	if o != nil && o.Inflections != nil {
		return true
	}

	return false
}

// SetInflections gets a reference to the given []InflectedForm and assigns it to the Inflections field.
func (o *BilingualSense) SetInflections(v []InflectedForm) {
	o.Inflections = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *BilingualSense) GetNotes() []map[string]interface{} {
	if o == nil || o.Notes == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetNotesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *BilingualSense) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []map[string]interface{} and assigns it to the Notes field.
func (o *BilingualSense) SetNotes(v []map[string]interface{}) {
	o.Notes = &v
}

// GetPronunciations returns the Pronunciations field value if set, zero value otherwise.
func (o *BilingualSense) GetPronunciations() []map[string]interface{} {
	if o == nil || o.Pronunciations == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Pronunciations
}

// GetPronunciationsOk returns a tuple with the Pronunciations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetPronunciationsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Pronunciations == nil {
		return nil, false
	}
	return o.Pronunciations, true
}

// HasPronunciations returns a boolean if a field has been set.
func (o *BilingualSense) HasPronunciations() bool {
	if o != nil && o.Pronunciations != nil {
		return true
	}

	return false
}

// SetPronunciations gets a reference to the given []map[string]interface{} and assigns it to the Pronunciations field.
func (o *BilingualSense) SetPronunciations(v []map[string]interface{}) {
	o.Pronunciations = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *BilingualSense) GetRegions() RegionsList {
	if o == nil || o.Regions == nil {
		var ret RegionsList
		return ret
	}
	return *o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetRegionsOk() (*RegionsList, bool) {
	if o == nil || o.Regions == nil {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *BilingualSense) HasRegions() bool {
	if o != nil && o.Regions != nil {
		return true
	}

	return false
}

// SetRegions gets a reference to the given RegionsList and assigns it to the Regions field.
func (o *BilingualSense) SetRegions(v RegionsList) {
	o.Regions = &v
}

// GetRegisters returns the Registers field value if set, zero value otherwise.
func (o *BilingualSense) GetRegisters() RegistersList {
	if o == nil || o.Registers == nil {
		var ret RegistersList
		return ret
	}
	return *o.Registers
}

// GetRegistersOk returns a tuple with the Registers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetRegistersOk() (*RegistersList, bool) {
	if o == nil || o.Registers == nil {
		return nil, false
	}
	return o.Registers, true
}

// HasRegisters returns a boolean if a field has been set.
func (o *BilingualSense) HasRegisters() bool {
	if o != nil && o.Registers != nil {
		return true
	}

	return false
}

// SetRegisters gets a reference to the given RegistersList and assigns it to the Registers field.
func (o *BilingualSense) SetRegisters(v RegistersList) {
	o.Registers = &v
}

// GetSemanticClasses returns the SemanticClasses field value if set, zero value otherwise.
func (o *BilingualSense) GetSemanticClasses() SemanticClassesList {
	if o == nil || o.SemanticClasses == nil {
		var ret SemanticClassesList
		return ret
	}
	return *o.SemanticClasses
}

// GetSemanticClassesOk returns a tuple with the SemanticClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetSemanticClassesOk() (*SemanticClassesList, bool) {
	if o == nil || o.SemanticClasses == nil {
		return nil, false
	}
	return o.SemanticClasses, true
}

// HasSemanticClasses returns a boolean if a field has been set.
func (o *BilingualSense) HasSemanticClasses() bool {
	if o != nil && o.SemanticClasses != nil {
		return true
	}

	return false
}

// SetSemanticClasses gets a reference to the given SemanticClassesList and assigns it to the SemanticClasses field.
func (o *BilingualSense) SetSemanticClasses(v SemanticClassesList) {
	o.SemanticClasses = &v
}

// GetShortDefinitions returns the ShortDefinitions field value if set, zero value otherwise.
func (o *BilingualSense) GetShortDefinitions() []string {
	if o == nil || o.ShortDefinitions == nil {
		var ret []string
		return ret
	}
	return *o.ShortDefinitions
}

// GetShortDefinitionsOk returns a tuple with the ShortDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetShortDefinitionsOk() (*[]string, bool) {
	if o == nil || o.ShortDefinitions == nil {
		return nil, false
	}
	return o.ShortDefinitions, true
}

// HasShortDefinitions returns a boolean if a field has been set.
func (o *BilingualSense) HasShortDefinitions() bool {
	if o != nil && o.ShortDefinitions != nil {
		return true
	}

	return false
}

// SetShortDefinitions gets a reference to the given []string and assigns it to the ShortDefinitions field.
func (o *BilingualSense) SetShortDefinitions(v []string) {
	o.ShortDefinitions = &v
}

// GetSubsenses returns the Subsenses field value if set, zero value otherwise.
func (o *BilingualSense) GetSubsenses() []BilingualSense {
	if o == nil || o.Subsenses == nil {
		var ret []BilingualSense
		return ret
	}
	return *o.Subsenses
}

// GetSubsensesOk returns a tuple with the Subsenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetSubsensesOk() (*[]BilingualSense, bool) {
	if o == nil || o.Subsenses == nil {
		return nil, false
	}
	return o.Subsenses, true
}

// HasSubsenses returns a boolean if a field has been set.
func (o *BilingualSense) HasSubsenses() bool {
	if o != nil && o.Subsenses != nil {
		return true
	}

	return false
}

// SetSubsenses gets a reference to the given []BilingualSense and assigns it to the Subsenses field.
func (o *BilingualSense) SetSubsenses(v []BilingualSense) {
	o.Subsenses = &v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *BilingualSense) GetSynonyms() []map[string]interface{} {
	if o == nil || o.Synonyms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetSynonymsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Synonyms == nil {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *BilingualSense) HasSynonyms() bool {
	if o != nil && o.Synonyms != nil {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given []map[string]interface{} and assigns it to the Synonyms field.
func (o *BilingualSense) SetSynonyms(v []map[string]interface{}) {
	o.Synonyms = &v
}

// GetThesaurusLinks returns the ThesaurusLinks field value if set, zero value otherwise.
func (o *BilingualSense) GetThesaurusLinks() []ThesaurusLink {
	if o == nil || o.ThesaurusLinks == nil {
		var ret []ThesaurusLink
		return ret
	}
	return *o.ThesaurusLinks
}

// GetThesaurusLinksOk returns a tuple with the ThesaurusLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetThesaurusLinksOk() (*[]ThesaurusLink, bool) {
	if o == nil || o.ThesaurusLinks == nil {
		return nil, false
	}
	return o.ThesaurusLinks, true
}

// HasThesaurusLinks returns a boolean if a field has been set.
func (o *BilingualSense) HasThesaurusLinks() bool {
	if o != nil && o.ThesaurusLinks != nil {
		return true
	}

	return false
}

// SetThesaurusLinks gets a reference to the given []ThesaurusLink and assigns it to the ThesaurusLinks field.
func (o *BilingualSense) SetThesaurusLinks(v []ThesaurusLink) {
	o.ThesaurusLinks = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *BilingualSense) GetTranslations() []map[string]interface{} {
	if o == nil || o.Translations == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetTranslationsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Translations == nil {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *BilingualSense) HasTranslations() bool {
	if o != nil && o.Translations != nil {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given []map[string]interface{} and assigns it to the Translations field.
func (o *BilingualSense) SetTranslations(v []map[string]interface{}) {
	o.Translations = &v
}

// GetVariantForms returns the VariantForms field value if set, zero value otherwise.
func (o *BilingualSense) GetVariantForms() []map[string]interface{} {
	if o == nil || o.VariantForms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.VariantForms
}

// GetVariantFormsOk returns a tuple with the VariantForms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualSense) GetVariantFormsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.VariantForms == nil {
		return nil, false
	}
	return o.VariantForms, true
}

// HasVariantForms returns a boolean if a field has been set.
func (o *BilingualSense) HasVariantForms() bool {
	if o != nil && o.VariantForms != nil {
		return true
	}

	return false
}

// SetVariantForms gets a reference to the given []map[string]interface{} and assigns it to the VariantForms field.
func (o *BilingualSense) SetVariantForms(v []map[string]interface{}) {
	o.VariantForms = &v
}

func (o BilingualSense) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Antonyms != nil {
		toSerialize["antonyms"] = o.Antonyms
	}
	if o.Constructions != nil {
		toSerialize["constructions"] = o.Constructions
	}
	if o.CrossReferenceMarkers != nil {
		toSerialize["crossReferenceMarkers"] = o.CrossReferenceMarkers
	}
	if o.CrossReferences != nil {
		toSerialize["crossReferences"] = o.CrossReferences
	}
	if o.DatasetCrossLinks != nil {
		toSerialize["datasetCrossLinks"] = o.DatasetCrossLinks
	}
	if o.Definitions != nil {
		toSerialize["definitions"] = o.Definitions
	}
	if o.DomainClasses != nil {
		toSerialize["domainClasses"] = o.DomainClasses
	}
	if o.Domains != nil {
		toSerialize["domains"] = o.Domains
	}
	if o.Etymologies != nil {
		toSerialize["etymologies"] = o.Etymologies
	}
	if o.Examples != nil {
		toSerialize["examples"] = o.Examples
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Inflections != nil {
		toSerialize["inflections"] = o.Inflections
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	if o.Pronunciations != nil {
		toSerialize["pronunciations"] = o.Pronunciations
	}
	if o.Regions != nil {
		toSerialize["regions"] = o.Regions
	}
	if o.Registers != nil {
		toSerialize["registers"] = o.Registers
	}
	if o.SemanticClasses != nil {
		toSerialize["semanticClasses"] = o.SemanticClasses
	}
	if o.ShortDefinitions != nil {
		toSerialize["shortDefinitions"] = o.ShortDefinitions
	}
	if o.Subsenses != nil {
		toSerialize["subsenses"] = o.Subsenses
	}
	if o.Synonyms != nil {
		toSerialize["synonyms"] = o.Synonyms
	}
	if o.ThesaurusLinks != nil {
		toSerialize["thesaurusLinks"] = o.ThesaurusLinks
	}
	if o.Translations != nil {
		toSerialize["translations"] = o.Translations
	}
	if o.VariantForms != nil {
		toSerialize["variantForms"] = o.VariantForms
	}
	return json.Marshal(toSerialize)
}

type NullableBilingualSense struct {
	value *BilingualSense
	isSet bool
}

func (v NullableBilingualSense) Get() *BilingualSense {
	return v.value
}

func (v *NullableBilingualSense) Set(val *BilingualSense) {
	v.value = val
	v.isSet = true
}

func (v NullableBilingualSense) IsSet() bool {
	return v.isSet
}

func (v *NullableBilingualSense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBilingualSense(val *BilingualSense) *NullableBilingualSense {
	return &NullableBilingualSense{value: val, isSet: true}
}

func (v NullableBilingualSense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBilingualSense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



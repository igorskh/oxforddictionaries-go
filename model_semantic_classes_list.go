/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// SemanticClassesList struct for SemanticClassesList
type SemanticClassesList struct {
}

// NewSemanticClassesList instantiates a new SemanticClassesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSemanticClassesList() *SemanticClassesList {
	this := SemanticClassesList{}
	return &this
}

// NewSemanticClassesListWithDefaults instantiates a new SemanticClassesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSemanticClassesListWithDefaults() *SemanticClassesList {
	this := SemanticClassesList{}
	return &this
}

func (o SemanticClassesList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	return json.Marshal(toSerialize)
}

type NullableSemanticClassesList struct {
	value *SemanticClassesList
	isSet bool
}

func (v NullableSemanticClassesList) Get() *SemanticClassesList {
	return v.value
}

func (v *NullableSemanticClassesList) Set(val *SemanticClassesList) {
	v.value = val
	v.isSet = true
}

func (v NullableSemanticClassesList) IsSet() bool {
	return v.isSet
}

func (v *NullableSemanticClassesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSemanticClassesList(val *SemanticClassesList) *NullableSemanticClassesList {
	return &NullableSemanticClassesList{value: val, isSet: true}
}

func (v NullableSemanticClassesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSemanticClassesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// WordlistResults Description of found word
type WordlistResults struct {
	// The identifier of a word
	Id string `json:"id"`
	MatchString *string `json:"matchString,omitempty"`
	MatchType *string `json:"matchType,omitempty"`
	// Name of region.
	Region *string `json:"region,omitempty"`
	// Search score
	Score *float32 `json:"score,omitempty"`
	// (DEPRECATED) A given written or spoken realisation of an entry, lowercased.
	Word string `json:"word"`
}

// NewWordlistResults instantiates a new WordlistResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWordlistResults(id string, word string) *WordlistResults {
	this := WordlistResults{}
	this.Id = id
	this.Word = word
	return &this
}

// NewWordlistResultsWithDefaults instantiates a new WordlistResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWordlistResultsWithDefaults() *WordlistResults {
	this := WordlistResults{}
	return &this
}

// GetId returns the Id field value
func (o *WordlistResults) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WordlistResults) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WordlistResults) SetId(v string) {
	o.Id = v
}

// GetMatchString returns the MatchString field value if set, zero value otherwise.
func (o *WordlistResults) GetMatchString() string {
	if o == nil || o.MatchString == nil {
		var ret string
		return ret
	}
	return *o.MatchString
}

// GetMatchStringOk returns a tuple with the MatchString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WordlistResults) GetMatchStringOk() (*string, bool) {
	if o == nil || o.MatchString == nil {
		return nil, false
	}
	return o.MatchString, true
}

// HasMatchString returns a boolean if a field has been set.
func (o *WordlistResults) HasMatchString() bool {
	if o != nil && o.MatchString != nil {
		return true
	}

	return false
}

// SetMatchString gets a reference to the given string and assigns it to the MatchString field.
func (o *WordlistResults) SetMatchString(v string) {
	o.MatchString = &v
}

// GetMatchType returns the MatchType field value if set, zero value otherwise.
func (o *WordlistResults) GetMatchType() string {
	if o == nil || o.MatchType == nil {
		var ret string
		return ret
	}
	return *o.MatchType
}

// GetMatchTypeOk returns a tuple with the MatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WordlistResults) GetMatchTypeOk() (*string, bool) {
	if o == nil || o.MatchType == nil {
		return nil, false
	}
	return o.MatchType, true
}

// HasMatchType returns a boolean if a field has been set.
func (o *WordlistResults) HasMatchType() bool {
	if o != nil && o.MatchType != nil {
		return true
	}

	return false
}

// SetMatchType gets a reference to the given string and assigns it to the MatchType field.
func (o *WordlistResults) SetMatchType(v string) {
	o.MatchType = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *WordlistResults) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WordlistResults) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *WordlistResults) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *WordlistResults) SetRegion(v string) {
	o.Region = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *WordlistResults) GetScore() float32 {
	if o == nil || o.Score == nil {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WordlistResults) GetScoreOk() (*float32, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *WordlistResults) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *WordlistResults) SetScore(v float32) {
	o.Score = &v
}

// GetWord returns the Word field value
func (o *WordlistResults) GetWord() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Word
}

// GetWordOk returns a tuple with the Word field value
// and a boolean to check if the value has been set.
func (o *WordlistResults) GetWordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Word, true
}

// SetWord sets field value
func (o *WordlistResults) SetWord(v string) {
	o.Word = v
}

func (o WordlistResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.MatchString != nil {
		toSerialize["matchString"] = o.MatchString
	}
	if o.MatchType != nil {
		toSerialize["matchType"] = o.MatchType
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	if true {
		toSerialize["word"] = o.Word
	}
	return json.Marshal(toSerialize)
}

type NullableWordlistResults struct {
	value *WordlistResults
	isSet bool
}

func (v NullableWordlistResults) Get() *WordlistResults {
	return v.value
}

func (v *NullableWordlistResults) Set(val *WordlistResults) {
	v.value = val
	v.isSet = true
}

func (v NullableWordlistResults) IsSet() bool {
	return v.isSet
}

func (v *NullableWordlistResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWordlistResults(val *WordlistResults) *NullableWordlistResults {
	return &NullableWordlistResults{value: val, isSet: true}
}

func (v NullableWordlistResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWordlistResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



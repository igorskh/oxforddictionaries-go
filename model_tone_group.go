/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// ToneGroup One or more encodings of a distinct tonal variation for a lexical item or its translation
type ToneGroup struct {
	Tones []ToneGroupTones `json:"tones"`
}

// NewToneGroup instantiates a new ToneGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToneGroup(tones []ToneGroupTones) *ToneGroup {
	this := ToneGroup{}
	this.Tones = tones
	return &this
}

// NewToneGroupWithDefaults instantiates a new ToneGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToneGroupWithDefaults() *ToneGroup {
	this := ToneGroup{}
	return &this
}

// GetTones returns the Tones field value
func (o *ToneGroup) GetTones() []ToneGroupTones {
	if o == nil {
		var ret []ToneGroupTones
		return ret
	}

	return o.Tones
}

// GetTonesOk returns a tuple with the Tones field value
// and a boolean to check if the value has been set.
func (o *ToneGroup) GetTonesOk() (*[]ToneGroupTones, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Tones, true
}

// SetTones sets field value
func (o *ToneGroup) SetTones(v []ToneGroupTones) {
	o.Tones = v
}

func (o ToneGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tones"] = o.Tones
	}
	return json.Marshal(toSerialize)
}

type NullableToneGroup struct {
	value *ToneGroup
	isSet bool
}

func (v NullableToneGroup) Get() *ToneGroup {
	return v.value
}

func (v *NullableToneGroup) Set(val *ToneGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableToneGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableToneGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToneGroup(val *ToneGroup) *NullableToneGroup {
	return &NullableToneGroup{value: val, isSet: true}
}

func (v NullableToneGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToneGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



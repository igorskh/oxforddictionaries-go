/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// Lemmatron Schema for the Lemmas endpoint.
type Lemmatron struct {
	// Additional Information provided by OUP
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
	// A list of inflections matching a given word
	Results *[]HeadwordLemmatron `json:"results,omitempty"`
}

// NewLemmatron instantiates a new Lemmatron object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLemmatron() *Lemmatron {
	this := Lemmatron{}
	return &this
}

// NewLemmatronWithDefaults instantiates a new Lemmatron object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLemmatronWithDefaults() *Lemmatron {
	this := Lemmatron{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Lemmatron) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lemmatron) GetMetadataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Lemmatron) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Lemmatron) SetMetadata(v map[string]interface{}) {
	o.Metadata = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *Lemmatron) GetResults() []HeadwordLemmatron {
	if o == nil || o.Results == nil {
		var ret []HeadwordLemmatron
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lemmatron) GetResultsOk() (*[]HeadwordLemmatron, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *Lemmatron) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []HeadwordLemmatron and assigns it to the Results field.
func (o *Lemmatron) SetResults(v []HeadwordLemmatron) {
	o.Results = &v
}

func (o Lemmatron) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableLemmatron struct {
	value *Lemmatron
	isSet bool
}

func (v NullableLemmatron) Get() *Lemmatron {
	return v.value
}

func (v *NullableLemmatron) Set(val *Lemmatron) {
	v.value = val
	v.isSet = true
}

func (v NullableLemmatron) IsSet() bool {
	return v.isSet
}

func (v *NullableLemmatron) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLemmatron(val *Lemmatron) *NullableLemmatron {
	return &NullableLemmatron{value: val, isSet: true}
}

func (v NullableLemmatron) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLemmatron) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



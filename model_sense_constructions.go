/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// SenseConstructions struct for SenseConstructions
type SenseConstructions struct {
	Domains *DomainsList `json:"domains,omitempty"`
	Examples *[][]string `json:"examples,omitempty"`
	// various types of notes that appear
	Notes *[]map[string]interface{} `json:"notes,omitempty"`
	Regions *RegionsList `json:"regions,omitempty"`
	Registers *RegistersList `json:"registers,omitempty"`
	// The construction text
	Text string `json:"text"`
}

// NewSenseConstructions instantiates a new SenseConstructions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSenseConstructions(text string) *SenseConstructions {
	this := SenseConstructions{}
	this.Text = text
	return &this
}

// NewSenseConstructionsWithDefaults instantiates a new SenseConstructions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSenseConstructionsWithDefaults() *SenseConstructions {
	this := SenseConstructions{}
	return &this
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *SenseConstructions) GetDomains() DomainsList {
	if o == nil || o.Domains == nil {
		var ret DomainsList
		return ret
	}
	return *o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenseConstructions) GetDomainsOk() (*DomainsList, bool) {
	if o == nil || o.Domains == nil {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *SenseConstructions) HasDomains() bool {
	if o != nil && o.Domains != nil {
		return true
	}

	return false
}

// SetDomains gets a reference to the given DomainsList and assigns it to the Domains field.
func (o *SenseConstructions) SetDomains(v DomainsList) {
	o.Domains = &v
}

// GetExamples returns the Examples field value if set, zero value otherwise.
func (o *SenseConstructions) GetExamples() [][]string {
	if o == nil || o.Examples == nil {
		var ret [][]string
		return ret
	}
	return *o.Examples
}

// GetExamplesOk returns a tuple with the Examples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenseConstructions) GetExamplesOk() (*[][]string, bool) {
	if o == nil || o.Examples == nil {
		return nil, false
	}
	return o.Examples, true
}

// HasExamples returns a boolean if a field has been set.
func (o *SenseConstructions) HasExamples() bool {
	if o != nil && o.Examples != nil {
		return true
	}

	return false
}

// SetExamples gets a reference to the given [][]string and assigns it to the Examples field.
func (o *SenseConstructions) SetExamples(v [][]string) {
	o.Examples = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *SenseConstructions) GetNotes() []map[string]interface{} {
	if o == nil || o.Notes == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenseConstructions) GetNotesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *SenseConstructions) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []map[string]interface{} and assigns it to the Notes field.
func (o *SenseConstructions) SetNotes(v []map[string]interface{}) {
	o.Notes = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *SenseConstructions) GetRegions() RegionsList {
	if o == nil || o.Regions == nil {
		var ret RegionsList
		return ret
	}
	return *o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenseConstructions) GetRegionsOk() (*RegionsList, bool) {
	if o == nil || o.Regions == nil {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *SenseConstructions) HasRegions() bool {
	if o != nil && o.Regions != nil {
		return true
	}

	return false
}

// SetRegions gets a reference to the given RegionsList and assigns it to the Regions field.
func (o *SenseConstructions) SetRegions(v RegionsList) {
	o.Regions = &v
}

// GetRegisters returns the Registers field value if set, zero value otherwise.
func (o *SenseConstructions) GetRegisters() RegistersList {
	if o == nil || o.Registers == nil {
		var ret RegistersList
		return ret
	}
	return *o.Registers
}

// GetRegistersOk returns a tuple with the Registers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SenseConstructions) GetRegistersOk() (*RegistersList, bool) {
	if o == nil || o.Registers == nil {
		return nil, false
	}
	return o.Registers, true
}

// HasRegisters returns a boolean if a field has been set.
func (o *SenseConstructions) HasRegisters() bool {
	if o != nil && o.Registers != nil {
		return true
	}

	return false
}

// SetRegisters gets a reference to the given RegistersList and assigns it to the Registers field.
func (o *SenseConstructions) SetRegisters(v RegistersList) {
	o.Registers = &v
}

// GetText returns the Text field value
func (o *SenseConstructions) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *SenseConstructions) GetTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *SenseConstructions) SetText(v string) {
	o.Text = v
}

func (o SenseConstructions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domains != nil {
		toSerialize["domains"] = o.Domains
	}
	if o.Examples != nil {
		toSerialize["examples"] = o.Examples
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	if o.Regions != nil {
		toSerialize["regions"] = o.Regions
	}
	if o.Registers != nil {
		toSerialize["registers"] = o.Registers
	}
	if true {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableSenseConstructions struct {
	value *SenseConstructions
	isSet bool
}

func (v NullableSenseConstructions) Get() *SenseConstructions {
	return v.value
}

func (v *NullableSenseConstructions) Set(val *SenseConstructions) {
	v.value = val
	v.isSet = true
}

func (v NullableSenseConstructions) IsSet() bool {
	return v.isSet
}

func (v *NullableSenseConstructions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSenseConstructions(val *SenseConstructions) *NullableSenseConstructions {
	return &NullableSenseConstructions{value: val, isSet: true}
}

func (v NullableSenseConstructions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSenseConstructions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



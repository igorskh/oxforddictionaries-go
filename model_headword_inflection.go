/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// HeadwordInflection Description of an inflected form of a word
type HeadwordInflection struct {
	// The identifier of a word
	Id string `json:"id"`
	// IANA language code
	Language string `json:"language"`
	// A grouping of various senses in a specific language, and a lexical category that relates to a word
	LexicalEntries []InflectionLexicalEntry `json:"lexicalEntries"`
	// A given written or spoken realisation of an entry.
	Text *string `json:"text,omitempty"`
}

// NewHeadwordInflection instantiates a new HeadwordInflection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeadwordInflection(id string, language string, lexicalEntries []InflectionLexicalEntry) *HeadwordInflection {
	this := HeadwordInflection{}
	this.Id = id
	this.Language = language
	this.LexicalEntries = lexicalEntries
	return &this
}

// NewHeadwordInflectionWithDefaults instantiates a new HeadwordInflection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeadwordInflectionWithDefaults() *HeadwordInflection {
	this := HeadwordInflection{}
	return &this
}

// GetId returns the Id field value
func (o *HeadwordInflection) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *HeadwordInflection) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *HeadwordInflection) SetId(v string) {
	o.Id = v
}

// GetLanguage returns the Language field value
func (o *HeadwordInflection) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *HeadwordInflection) GetLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *HeadwordInflection) SetLanguage(v string) {
	o.Language = v
}

// GetLexicalEntries returns the LexicalEntries field value
func (o *HeadwordInflection) GetLexicalEntries() []InflectionLexicalEntry {
	if o == nil {
		var ret []InflectionLexicalEntry
		return ret
	}

	return o.LexicalEntries
}

// GetLexicalEntriesOk returns a tuple with the LexicalEntries field value
// and a boolean to check if the value has been set.
func (o *HeadwordInflection) GetLexicalEntriesOk() (*[]InflectionLexicalEntry, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LexicalEntries, true
}

// SetLexicalEntries sets field value
func (o *HeadwordInflection) SetLexicalEntries(v []InflectionLexicalEntry) {
	o.LexicalEntries = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *HeadwordInflection) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeadwordInflection) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *HeadwordInflection) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *HeadwordInflection) SetText(v string) {
	o.Text = &v
}

func (o HeadwordInflection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["language"] = o.Language
	}
	if true {
		toSerialize["lexicalEntries"] = o.LexicalEntries
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableHeadwordInflection struct {
	value *HeadwordInflection
	isSet bool
}

func (v NullableHeadwordInflection) Get() *HeadwordInflection {
	return v.value
}

func (v *NullableHeadwordInflection) Set(val *HeadwordInflection) {
	v.value = val
	v.isSet = true
}

func (v NullableHeadwordInflection) IsSet() bool {
	return v.isSet
}

func (v *NullableHeadwordInflection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeadwordInflection(val *HeadwordInflection) *NullableHeadwordInflection {
	return &NullableHeadwordInflection{value: val, isSet: true}
}

func (v NullableHeadwordInflection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeadwordInflection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



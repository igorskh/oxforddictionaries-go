/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// InflectionLexicalEntry Description of an entry for a particular part of speech and grammatical features
type InflectionLexicalEntry struct {
	// The different forms are correlated with meanings or functions which we text as 'features'
	GrammaticalFeatures *[]map[string]interface{} `json:"grammaticalFeatures,omitempty"`
	// A list of inflected forms for a lexicalEntry.
	Inflections *[]InflectedForm `json:"inflections,omitempty"`
	// IANA language code
	Language string `json:"language"`
	LexicalCategory LexicalCategory `json:"lexicalCategory"`
}

// NewInflectionLexicalEntry instantiates a new InflectionLexicalEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInflectionLexicalEntry(language string, lexicalCategory LexicalCategory) *InflectionLexicalEntry {
	this := InflectionLexicalEntry{}
	this.Language = language
	this.LexicalCategory = lexicalCategory
	return &this
}

// NewInflectionLexicalEntryWithDefaults instantiates a new InflectionLexicalEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInflectionLexicalEntryWithDefaults() *InflectionLexicalEntry {
	this := InflectionLexicalEntry{}
	return &this
}

// GetGrammaticalFeatures returns the GrammaticalFeatures field value if set, zero value otherwise.
func (o *InflectionLexicalEntry) GetGrammaticalFeatures() []map[string]interface{} {
	if o == nil || o.GrammaticalFeatures == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.GrammaticalFeatures
}

// GetGrammaticalFeaturesOk returns a tuple with the GrammaticalFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InflectionLexicalEntry) GetGrammaticalFeaturesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.GrammaticalFeatures == nil {
		return nil, false
	}
	return o.GrammaticalFeatures, true
}

// HasGrammaticalFeatures returns a boolean if a field has been set.
func (o *InflectionLexicalEntry) HasGrammaticalFeatures() bool {
	if o != nil && o.GrammaticalFeatures != nil {
		return true
	}

	return false
}

// SetGrammaticalFeatures gets a reference to the given []map[string]interface{} and assigns it to the GrammaticalFeatures field.
func (o *InflectionLexicalEntry) SetGrammaticalFeatures(v []map[string]interface{}) {
	o.GrammaticalFeatures = &v
}

// GetInflections returns the Inflections field value if set, zero value otherwise.
func (o *InflectionLexicalEntry) GetInflections() []InflectedForm {
	if o == nil || o.Inflections == nil {
		var ret []InflectedForm
		return ret
	}
	return *o.Inflections
}

// GetInflectionsOk returns a tuple with the Inflections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InflectionLexicalEntry) GetInflectionsOk() (*[]InflectedForm, bool) {
	if o == nil || o.Inflections == nil {
		return nil, false
	}
	return o.Inflections, true
}

// HasInflections returns a boolean if a field has been set.
func (o *InflectionLexicalEntry) HasInflections() bool {
	if o != nil && o.Inflections != nil {
		return true
	}

	return false
}

// SetInflections gets a reference to the given []InflectedForm and assigns it to the Inflections field.
func (o *InflectionLexicalEntry) SetInflections(v []InflectedForm) {
	o.Inflections = &v
}

// GetLanguage returns the Language field value
func (o *InflectionLexicalEntry) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *InflectionLexicalEntry) GetLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *InflectionLexicalEntry) SetLanguage(v string) {
	o.Language = v
}

// GetLexicalCategory returns the LexicalCategory field value
func (o *InflectionLexicalEntry) GetLexicalCategory() LexicalCategory {
	if o == nil {
		var ret LexicalCategory
		return ret
	}

	return o.LexicalCategory
}

// GetLexicalCategoryOk returns a tuple with the LexicalCategory field value
// and a boolean to check if the value has been set.
func (o *InflectionLexicalEntry) GetLexicalCategoryOk() (*LexicalCategory, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LexicalCategory, true
}

// SetLexicalCategory sets field value
func (o *InflectionLexicalEntry) SetLexicalCategory(v LexicalCategory) {
	o.LexicalCategory = v
}

func (o InflectionLexicalEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GrammaticalFeatures != nil {
		toSerialize["grammaticalFeatures"] = o.GrammaticalFeatures
	}
	if o.Inflections != nil {
		toSerialize["inflections"] = o.Inflections
	}
	if true {
		toSerialize["language"] = o.Language
	}
	if true {
		toSerialize["lexicalCategory"] = o.LexicalCategory
	}
	return json.Marshal(toSerialize)
}

type NullableInflectionLexicalEntry struct {
	value *InflectionLexicalEntry
	isSet bool
}

func (v NullableInflectionLexicalEntry) Get() *InflectionLexicalEntry {
	return v.value
}

func (v *NullableInflectionLexicalEntry) Set(val *InflectionLexicalEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableInflectionLexicalEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableInflectionLexicalEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInflectionLexicalEntry(val *InflectionLexicalEntry) *NullableInflectionLexicalEntry {
	return &NullableInflectionLexicalEntry{value: val, isSet: true}
}

func (v NullableInflectionLexicalEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInflectionLexicalEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



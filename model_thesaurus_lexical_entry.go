/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// ThesaurusLexicalEntry Description of an entry for a particular part of speech
type ThesaurusLexicalEntry struct {
	Entries *[]ThesaurusEntry `json:"entries,omitempty"`
	// The different forms are correlated with meanings or functions which we text as 'features'
	GrammaticalFeatures *[]map[string]interface{} `json:"grammaticalFeatures,omitempty"`
	// IANA language code
	Language string `json:"language"`
	LexicalCategory LexicalCategory `json:"lexicalCategory"`
	// A given written or spoken realisation of an entry.
	Text string `json:"text"`
	// Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'
	VariantForms *[]map[string]interface{} `json:"variantForms,omitempty"`
}

// NewThesaurusLexicalEntry instantiates a new ThesaurusLexicalEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThesaurusLexicalEntry(language string, lexicalCategory LexicalCategory, text string) *ThesaurusLexicalEntry {
	this := ThesaurusLexicalEntry{}
	this.Language = language
	this.LexicalCategory = lexicalCategory
	this.Text = text
	return &this
}

// NewThesaurusLexicalEntryWithDefaults instantiates a new ThesaurusLexicalEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThesaurusLexicalEntryWithDefaults() *ThesaurusLexicalEntry {
	this := ThesaurusLexicalEntry{}
	return &this
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *ThesaurusLexicalEntry) GetEntries() []ThesaurusEntry {
	if o == nil || o.Entries == nil {
		var ret []ThesaurusEntry
		return ret
	}
	return *o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusLexicalEntry) GetEntriesOk() (*[]ThesaurusEntry, bool) {
	if o == nil || o.Entries == nil {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *ThesaurusLexicalEntry) HasEntries() bool {
	if o != nil && o.Entries != nil {
		return true
	}

	return false
}

// SetEntries gets a reference to the given []ThesaurusEntry and assigns it to the Entries field.
func (o *ThesaurusLexicalEntry) SetEntries(v []ThesaurusEntry) {
	o.Entries = &v
}

// GetGrammaticalFeatures returns the GrammaticalFeatures field value if set, zero value otherwise.
func (o *ThesaurusLexicalEntry) GetGrammaticalFeatures() []map[string]interface{} {
	if o == nil || o.GrammaticalFeatures == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.GrammaticalFeatures
}

// GetGrammaticalFeaturesOk returns a tuple with the GrammaticalFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusLexicalEntry) GetGrammaticalFeaturesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.GrammaticalFeatures == nil {
		return nil, false
	}
	return o.GrammaticalFeatures, true
}

// HasGrammaticalFeatures returns a boolean if a field has been set.
func (o *ThesaurusLexicalEntry) HasGrammaticalFeatures() bool {
	if o != nil && o.GrammaticalFeatures != nil {
		return true
	}

	return false
}

// SetGrammaticalFeatures gets a reference to the given []map[string]interface{} and assigns it to the GrammaticalFeatures field.
func (o *ThesaurusLexicalEntry) SetGrammaticalFeatures(v []map[string]interface{}) {
	o.GrammaticalFeatures = &v
}

// GetLanguage returns the Language field value
func (o *ThesaurusLexicalEntry) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *ThesaurusLexicalEntry) GetLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *ThesaurusLexicalEntry) SetLanguage(v string) {
	o.Language = v
}

// GetLexicalCategory returns the LexicalCategory field value
func (o *ThesaurusLexicalEntry) GetLexicalCategory() LexicalCategory {
	if o == nil {
		var ret LexicalCategory
		return ret
	}

	return o.LexicalCategory
}

// GetLexicalCategoryOk returns a tuple with the LexicalCategory field value
// and a boolean to check if the value has been set.
func (o *ThesaurusLexicalEntry) GetLexicalCategoryOk() (*LexicalCategory, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LexicalCategory, true
}

// SetLexicalCategory sets field value
func (o *ThesaurusLexicalEntry) SetLexicalCategory(v LexicalCategory) {
	o.LexicalCategory = v
}

// GetText returns the Text field value
func (o *ThesaurusLexicalEntry) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *ThesaurusLexicalEntry) GetTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *ThesaurusLexicalEntry) SetText(v string) {
	o.Text = v
}

// GetVariantForms returns the VariantForms field value if set, zero value otherwise.
func (o *ThesaurusLexicalEntry) GetVariantForms() []map[string]interface{} {
	if o == nil || o.VariantForms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.VariantForms
}

// GetVariantFormsOk returns a tuple with the VariantForms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusLexicalEntry) GetVariantFormsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.VariantForms == nil {
		return nil, false
	}
	return o.VariantForms, true
}

// HasVariantForms returns a boolean if a field has been set.
func (o *ThesaurusLexicalEntry) HasVariantForms() bool {
	if o != nil && o.VariantForms != nil {
		return true
	}

	return false
}

// SetVariantForms gets a reference to the given []map[string]interface{} and assigns it to the VariantForms field.
func (o *ThesaurusLexicalEntry) SetVariantForms(v []map[string]interface{}) {
	o.VariantForms = &v
}

func (o ThesaurusLexicalEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Entries != nil {
		toSerialize["entries"] = o.Entries
	}
	if o.GrammaticalFeatures != nil {
		toSerialize["grammaticalFeatures"] = o.GrammaticalFeatures
	}
	if true {
		toSerialize["language"] = o.Language
	}
	if true {
		toSerialize["lexicalCategory"] = o.LexicalCategory
	}
	if true {
		toSerialize["text"] = o.Text
	}
	if o.VariantForms != nil {
		toSerialize["variantForms"] = o.VariantForms
	}
	return json.Marshal(toSerialize)
}

type NullableThesaurusLexicalEntry struct {
	value *ThesaurusLexicalEntry
	isSet bool
}

func (v NullableThesaurusLexicalEntry) Get() *ThesaurusLexicalEntry {
	return v.value
}

func (v *NullableThesaurusLexicalEntry) Set(val *ThesaurusLexicalEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableThesaurusLexicalEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableThesaurusLexicalEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThesaurusLexicalEntry(val *ThesaurusLexicalEntry) *NullableThesaurusLexicalEntry {
	return &NullableThesaurusLexicalEntry{value: val, isSet: true}
}

func (v NullableThesaurusLexicalEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThesaurusLexicalEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// ThesaurusEntry struct for ThesaurusEntry
type ThesaurusEntry struct {
	// The different forms are correlated with meanings or functions which we text as 'features'
	GrammaticalFeatures *[]map[string]interface{} `json:"grammaticalFeatures,omitempty"`
	// Identifies the homograph grouping. The last two digits identify different entries of the same homograph. The first one/two digits identify the homograph number.
	HomographNumber *string `json:"homographNumber,omitempty"`
	// Complete list of senses
	Senses *[]ThesaurusSense `json:"senses,omitempty"`
	// Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'
	VariantForms *[]map[string]interface{} `json:"variantForms,omitempty"`
}

// NewThesaurusEntry instantiates a new ThesaurusEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThesaurusEntry() *ThesaurusEntry {
	this := ThesaurusEntry{}
	return &this
}

// NewThesaurusEntryWithDefaults instantiates a new ThesaurusEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThesaurusEntryWithDefaults() *ThesaurusEntry {
	this := ThesaurusEntry{}
	return &this
}

// GetGrammaticalFeatures returns the GrammaticalFeatures field value if set, zero value otherwise.
func (o *ThesaurusEntry) GetGrammaticalFeatures() []map[string]interface{} {
	if o == nil || o.GrammaticalFeatures == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.GrammaticalFeatures
}

// GetGrammaticalFeaturesOk returns a tuple with the GrammaticalFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusEntry) GetGrammaticalFeaturesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.GrammaticalFeatures == nil {
		return nil, false
	}
	return o.GrammaticalFeatures, true
}

// HasGrammaticalFeatures returns a boolean if a field has been set.
func (o *ThesaurusEntry) HasGrammaticalFeatures() bool {
	if o != nil && o.GrammaticalFeatures != nil {
		return true
	}

	return false
}

// SetGrammaticalFeatures gets a reference to the given []map[string]interface{} and assigns it to the GrammaticalFeatures field.
func (o *ThesaurusEntry) SetGrammaticalFeatures(v []map[string]interface{}) {
	o.GrammaticalFeatures = &v
}

// GetHomographNumber returns the HomographNumber field value if set, zero value otherwise.
func (o *ThesaurusEntry) GetHomographNumber() string {
	if o == nil || o.HomographNumber == nil {
		var ret string
		return ret
	}
	return *o.HomographNumber
}

// GetHomographNumberOk returns a tuple with the HomographNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusEntry) GetHomographNumberOk() (*string, bool) {
	if o == nil || o.HomographNumber == nil {
		return nil, false
	}
	return o.HomographNumber, true
}

// HasHomographNumber returns a boolean if a field has been set.
func (o *ThesaurusEntry) HasHomographNumber() bool {
	if o != nil && o.HomographNumber != nil {
		return true
	}

	return false
}

// SetHomographNumber gets a reference to the given string and assigns it to the HomographNumber field.
func (o *ThesaurusEntry) SetHomographNumber(v string) {
	o.HomographNumber = &v
}

// GetSenses returns the Senses field value if set, zero value otherwise.
func (o *ThesaurusEntry) GetSenses() []ThesaurusSense {
	if o == nil || o.Senses == nil {
		var ret []ThesaurusSense
		return ret
	}
	return *o.Senses
}

// GetSensesOk returns a tuple with the Senses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusEntry) GetSensesOk() (*[]ThesaurusSense, bool) {
	if o == nil || o.Senses == nil {
		return nil, false
	}
	return o.Senses, true
}

// HasSenses returns a boolean if a field has been set.
func (o *ThesaurusEntry) HasSenses() bool {
	if o != nil && o.Senses != nil {
		return true
	}

	return false
}

// SetSenses gets a reference to the given []ThesaurusSense and assigns it to the Senses field.
func (o *ThesaurusEntry) SetSenses(v []ThesaurusSense) {
	o.Senses = &v
}

// GetVariantForms returns the VariantForms field value if set, zero value otherwise.
func (o *ThesaurusEntry) GetVariantForms() []map[string]interface{} {
	if o == nil || o.VariantForms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.VariantForms
}

// GetVariantFormsOk returns a tuple with the VariantForms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusEntry) GetVariantFormsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.VariantForms == nil {
		return nil, false
	}
	return o.VariantForms, true
}

// HasVariantForms returns a boolean if a field has been set.
func (o *ThesaurusEntry) HasVariantForms() bool {
	if o != nil && o.VariantForms != nil {
		return true
	}

	return false
}

// SetVariantForms gets a reference to the given []map[string]interface{} and assigns it to the VariantForms field.
func (o *ThesaurusEntry) SetVariantForms(v []map[string]interface{}) {
	o.VariantForms = &v
}

func (o ThesaurusEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GrammaticalFeatures != nil {
		toSerialize["grammaticalFeatures"] = o.GrammaticalFeatures
	}
	if o.HomographNumber != nil {
		toSerialize["homographNumber"] = o.HomographNumber
	}
	if o.Senses != nil {
		toSerialize["senses"] = o.Senses
	}
	if o.VariantForms != nil {
		toSerialize["variantForms"] = o.VariantForms
	}
	return json.Marshal(toSerialize)
}

type NullableThesaurusEntry struct {
	value *ThesaurusEntry
	isSet bool
}

func (v NullableThesaurusEntry) Get() *ThesaurusEntry {
	return v.value
}

func (v *NullableThesaurusEntry) Set(val *ThesaurusEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableThesaurusEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableThesaurusEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThesaurusEntry(val *ThesaurusEntry) *NullableThesaurusEntry {
	return &NullableThesaurusEntry{value: val, isSet: true}
}

func (v NullableThesaurusEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThesaurusEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// TranslationsApiService TranslationsApi service
type TranslationsApiService service

type ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest struct {
	ctx _context.Context
	ApiService *TranslationsApiService
	sourceLangTranslate string
	targetLangTranslate string
	wordId string
	appId *string
	appKey *string
	strictMatch *bool
	fields *[]string
	grammaticalFeatures *string
	lexicalCategory *string
	domains *string
	registers *string
}

func (r ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest) AppId(appId string) ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest {
	r.appId = &appId
	return r
}
func (r ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest) AppKey(appKey string) ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest {
	r.appKey = &appKey
	return r
}
func (r ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest) StrictMatch(strictMatch bool) ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest {
	r.strictMatch = &strictMatch
	return r
}
func (r ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest) Fields(fields []string) ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest {
	r.fields = &fields
	return r
}
func (r ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest) GrammaticalFeatures(grammaticalFeatures string) ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest {
	r.grammaticalFeatures = &grammaticalFeatures
	return r
}
func (r ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest) LexicalCategory(lexicalCategory string) ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest {
	r.lexicalCategory = &lexicalCategory
	return r
}
func (r ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest) Domains(domains string) ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest {
	r.domains = &domains
	return r
}
func (r ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest) Registers(registers string) ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest {
	r.registers = &registers
	return r
}

func (r ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest) Execute() (RetrieveTranslations, *_nethttp.Response, error) {
	return r.ApiService.TranslationsSourceLangTranslateTargetLangTranslateWordIdGetExecute(r)
}

/*
 * TranslationsSourceLangTranslateTargetLangTranslateWordIdGet Retrieve translations for a given word
 * 
Use this to return translations for a given word. In the event that a word in the dataset does not have a direct translation, the response will be a [definition](documentation/glossary?term=entry) in the target language.

  <div id="translation"></div>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sourceLangTranslate Language code of the source language in a bilingual dataset.
 * @param targetLangTranslate Language code of the target language in a bilingual dataset.
 * @param wordId The identifier for an Entry (case-sensitive).
 * @return ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest
 */
func (a *TranslationsApiService) TranslationsSourceLangTranslateTargetLangTranslateWordIdGet(ctx _context.Context, sourceLangTranslate string, targetLangTranslate string, wordId string) ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest {
	return ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest{
		ApiService: a,
		ctx: ctx,
		sourceLangTranslate: sourceLangTranslate,
		targetLangTranslate: targetLangTranslate,
		wordId: wordId,
	}
}

/*
 * Execute executes the request
 * @return RetrieveTranslations
 */
func (a *TranslationsApiService) TranslationsSourceLangTranslateTargetLangTranslateWordIdGetExecute(r ApiTranslationsSourceLangTranslateTargetLangTranslateWordIdGetRequest) (RetrieveTranslations, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RetrieveTranslations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TranslationsApiService.TranslationsSourceLangTranslateTargetLangTranslateWordIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/translations/{source_lang_translate}/{target_lang_translate}/{word_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"source_lang_translate"+"}", _neturl.PathEscape(parameterToString(r.sourceLangTranslate, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"target_lang_translate"+"}", _neturl.PathEscape(parameterToString(r.targetLangTranslate, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"word_id"+"}", _neturl.PathEscape(parameterToString(r.wordId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.appId == nil {
		return localVarReturnValue, nil, reportError("appId is required and must be specified")
	}
	if r.appKey == nil {
		return localVarReturnValue, nil, reportError("appKey is required and must be specified")
	}

	if r.strictMatch != nil {
		localVarQueryParams.Add("strictMatch", parameterToString(*r.strictMatch, ""))
	}
	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, "csv"))
	}
	if r.grammaticalFeatures != nil {
		localVarQueryParams.Add("grammaticalFeatures", parameterToString(*r.grammaticalFeatures, ""))
	}
	if r.lexicalCategory != nil {
		localVarQueryParams.Add("lexicalCategory", parameterToString(*r.lexicalCategory, ""))
	}
	if r.domains != nil {
		localVarQueryParams.Add("domains", parameterToString(*r.domains, ""))
	}
	if r.registers != nil {
		localVarQueryParams.Add("registers", parameterToString(*r.registers, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["app_id"] = parameterToString(*r.appId, "")
	localVarHeaderParams["app_key"] = parameterToString(*r.appKey, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 414 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

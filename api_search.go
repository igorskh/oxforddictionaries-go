/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// SearchApiService SearchApi service
type SearchApiService service

type ApiSearchSourceLangGetRequest struct {
	ctx _context.Context
	ApiService *SearchApiService
	sourceLang string
	q *string
	appId *string
	appKey *string
	prefix *bool
	limit *int32
	offset *int32
}

func (r ApiSearchSourceLangGetRequest) Q(q string) ApiSearchSourceLangGetRequest {
	r.q = &q
	return r
}
func (r ApiSearchSourceLangGetRequest) AppId(appId string) ApiSearchSourceLangGetRequest {
	r.appId = &appId
	return r
}
func (r ApiSearchSourceLangGetRequest) AppKey(appKey string) ApiSearchSourceLangGetRequest {
	r.appKey = &appKey
	return r
}
func (r ApiSearchSourceLangGetRequest) Prefix(prefix bool) ApiSearchSourceLangGetRequest {
	r.prefix = &prefix
	return r
}
func (r ApiSearchSourceLangGetRequest) Limit(limit int32) ApiSearchSourceLangGetRequest {
	r.limit = &limit
	return r
}
func (r ApiSearchSourceLangGetRequest) Offset(offset int32) ApiSearchSourceLangGetRequest {
	r.offset = &offset
	return r
}

func (r ApiSearchSourceLangGetRequest) Execute() (Wordlist, *_nethttp.Response, error) {
	return r.ApiService.SearchSourceLangGetExecute(r)
}

/*
 * SearchSourceLangGet Retrieves possible dictionary matches to an input string
 * 
Use this to retrieve possible [headword](documentation/glossary?term=headword) matches for a given string of text. The results are calculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term=lemma).

  <div id="search"></div>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sourceLang Language code of the source language in a monolingual dataset.
 * @return ApiSearchSourceLangGetRequest
 */
func (a *SearchApiService) SearchSourceLangGet(ctx _context.Context, sourceLang string) ApiSearchSourceLangGetRequest {
	return ApiSearchSourceLangGetRequest{
		ApiService: a,
		ctx: ctx,
		sourceLang: sourceLang,
	}
}

/*
 * Execute executes the request
 * @return Wordlist
 */
func (a *SearchApiService) SearchSourceLangGetExecute(r ApiSearchSourceLangGetRequest) (Wordlist, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Wordlist
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.SearchSourceLangGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search/{source_lang}"
	localVarPath = strings.Replace(localVarPath, "{"+"source_lang"+"}", _neturl.PathEscape(parameterToString(r.sourceLang, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}
	if r.appId == nil {
		return localVarReturnValue, nil, reportError("appId is required and must be specified")
	}
	if r.appKey == nil {
		return localVarReturnValue, nil, reportError("appKey is required and must be specified")
	}

	localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["app_id"] = parameterToString(*r.appId, "")
	localVarHeaderParams["app_key"] = parameterToString(*r.appKey, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchThesaurusSourceLangGetRequest struct {
	ctx _context.Context
	ApiService *SearchApiService
	sourceLang string
	q *string
	appId *string
	appKey *string
	prefix *bool
	limit *int32
	offset *int32
}

func (r ApiSearchThesaurusSourceLangGetRequest) Q(q string) ApiSearchThesaurusSourceLangGetRequest {
	r.q = &q
	return r
}
func (r ApiSearchThesaurusSourceLangGetRequest) AppId(appId string) ApiSearchThesaurusSourceLangGetRequest {
	r.appId = &appId
	return r
}
func (r ApiSearchThesaurusSourceLangGetRequest) AppKey(appKey string) ApiSearchThesaurusSourceLangGetRequest {
	r.appKey = &appKey
	return r
}
func (r ApiSearchThesaurusSourceLangGetRequest) Prefix(prefix bool) ApiSearchThesaurusSourceLangGetRequest {
	r.prefix = &prefix
	return r
}
func (r ApiSearchThesaurusSourceLangGetRequest) Limit(limit int32) ApiSearchThesaurusSourceLangGetRequest {
	r.limit = &limit
	return r
}
func (r ApiSearchThesaurusSourceLangGetRequest) Offset(offset int32) ApiSearchThesaurusSourceLangGetRequest {
	r.offset = &offset
	return r
}

func (r ApiSearchThesaurusSourceLangGetRequest) Execute() (Wordlist, *_nethttp.Response, error) {
	return r.ApiService.SearchThesaurusSourceLangGetExecute(r)
}

/*
 * SearchThesaurusSourceLangGet Retrieves possible dictionary matches to an input string
 * 
Use this to retrieve possible [headword](documentation/glossary?term=headword) matches for a given string of text. The results are calculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term=lemma).

  <div id="search"></div>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sourceLang Language code of the source language in a Thesaurus dataset.
 * @return ApiSearchThesaurusSourceLangGetRequest
 */
func (a *SearchApiService) SearchThesaurusSourceLangGet(ctx _context.Context, sourceLang string) ApiSearchThesaurusSourceLangGetRequest {
	return ApiSearchThesaurusSourceLangGetRequest{
		ApiService: a,
		ctx: ctx,
		sourceLang: sourceLang,
	}
}

/*
 * Execute executes the request
 * @return Wordlist
 */
func (a *SearchApiService) SearchThesaurusSourceLangGetExecute(r ApiSearchThesaurusSourceLangGetRequest) (Wordlist, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Wordlist
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.SearchThesaurusSourceLangGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search/thesaurus/{source_lang}"
	localVarPath = strings.Replace(localVarPath, "{"+"source_lang"+"}", _neturl.PathEscape(parameterToString(r.sourceLang, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}
	if r.appId == nil {
		return localVarReturnValue, nil, reportError("appId is required and must be specified")
	}
	if r.appKey == nil {
		return localVarReturnValue, nil, reportError("appKey is required and must be specified")
	}

	localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["app_id"] = parameterToString(*r.appId, "")
	localVarHeaderParams["app_key"] = parameterToString(*r.appKey, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest struct {
	ctx _context.Context
	ApiService *SearchApiService
	sourceLangSearch string
	targetLangSearch string
	q *string
	appId *string
	appKey *string
	prefix *bool
	limit *int32
	offset *int32
}

func (r ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest) Q(q string) ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest {
	r.q = &q
	return r
}
func (r ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest) AppId(appId string) ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest {
	r.appId = &appId
	return r
}
func (r ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest) AppKey(appKey string) ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest {
	r.appKey = &appKey
	return r
}
func (r ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest) Prefix(prefix bool) ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest {
	r.prefix = &prefix
	return r
}
func (r ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest) Limit(limit int32) ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest {
	r.limit = &limit
	return r
}
func (r ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest) Offset(offset int32) ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest {
	r.offset = &offset
	return r
}

func (r ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest) Execute() (Wordlist, *_nethttp.Response, error) {
	return r.ApiService.SearchTranslationsSourceLangSearchTargetLangSearchGetExecute(r)
}

/*
 * SearchTranslationsSourceLangSearchTargetLangSearchGet Retrieves possible headwords with translations
 * 
Use this to find possible headwords with translations for a given word.

<div id="search_translation"></div>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sourceLangSearch Language code of the source language in a bilingual dataset.
 * @param targetLangSearch Language code of the target language in a bilingual dataset.
 * @return ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest
 */
func (a *SearchApiService) SearchTranslationsSourceLangSearchTargetLangSearchGet(ctx _context.Context, sourceLangSearch string, targetLangSearch string) ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest {
	return ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest{
		ApiService: a,
		ctx: ctx,
		sourceLangSearch: sourceLangSearch,
		targetLangSearch: targetLangSearch,
	}
}

/*
 * Execute executes the request
 * @return Wordlist
 */
func (a *SearchApiService) SearchTranslationsSourceLangSearchTargetLangSearchGetExecute(r ApiSearchTranslationsSourceLangSearchTargetLangSearchGetRequest) (Wordlist, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Wordlist
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.SearchTranslationsSourceLangSearchTargetLangSearchGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search/translations/{source_lang_search}/{target_lang_search}"
	localVarPath = strings.Replace(localVarPath, "{"+"source_lang_search"+"}", _neturl.PathEscape(parameterToString(r.sourceLangSearch, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"target_lang_search"+"}", _neturl.PathEscape(parameterToString(r.targetLangSearch, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}
	if r.appId == nil {
		return localVarReturnValue, nil, reportError("appId is required and must be specified")
	}
	if r.appKey == nil {
		return localVarReturnValue, nil, reportError("appKey is required and must be specified")
	}

	localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	if r.prefix != nil {
		localVarQueryParams.Add("prefix", parameterToString(*r.prefix, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["app_id"] = parameterToString(*r.appId, "")
	localVarHeaderParams["app_key"] = parameterToString(*r.appKey, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// BilingualEntry struct for BilingualEntry
type BilingualEntry struct {
	CrossReferenceMarkers *[]string `json:"crossReferenceMarkers,omitempty"`
	// A reference to another word that is closely related, might provide additional information about the subject, has a variant spelling or is an abbreviated form of it.
	CrossReferences *[]map[string]interface{} `json:"crossReferences,omitempty"`
	Etymologies *[]string `json:"etymologies,omitempty"`
	// The different forms are correlated with meanings or functions which we text as 'features'
	GrammaticalFeatures *[]map[string]interface{} `json:"grammaticalFeatures,omitempty"`
	// Identifies the homograph grouping. The last two digits identify different entries of the same homograph. The first one/two digits identify the homograph number.
	HomographNumber *string `json:"homographNumber,omitempty"`
	// A list of inflected forms for an Entry.
	Inflections *[]InflectedForm `json:"inflections,omitempty"`
	// various types of notes that appear
	Notes *[]map[string]interface{} `json:"notes,omitempty"`
	// A list of possible pronunciations of a word
	Pronunciations *[]map[string]interface{} `json:"pronunciations,omitempty"`
	// Complete list of senses for bilingual entries
	Senses *[]BilingualSense `json:"senses,omitempty"`
	// Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'
	VariantForms *[]map[string]interface{} `json:"variantForms,omitempty"`
}

// NewBilingualEntry instantiates a new BilingualEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBilingualEntry() *BilingualEntry {
	this := BilingualEntry{}
	return &this
}

// NewBilingualEntryWithDefaults instantiates a new BilingualEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBilingualEntryWithDefaults() *BilingualEntry {
	this := BilingualEntry{}
	return &this
}

// GetCrossReferenceMarkers returns the CrossReferenceMarkers field value if set, zero value otherwise.
func (o *BilingualEntry) GetCrossReferenceMarkers() []string {
	if o == nil || o.CrossReferenceMarkers == nil {
		var ret []string
		return ret
	}
	return *o.CrossReferenceMarkers
}

// GetCrossReferenceMarkersOk returns a tuple with the CrossReferenceMarkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualEntry) GetCrossReferenceMarkersOk() (*[]string, bool) {
	if o == nil || o.CrossReferenceMarkers == nil {
		return nil, false
	}
	return o.CrossReferenceMarkers, true
}

// HasCrossReferenceMarkers returns a boolean if a field has been set.
func (o *BilingualEntry) HasCrossReferenceMarkers() bool {
	if o != nil && o.CrossReferenceMarkers != nil {
		return true
	}

	return false
}

// SetCrossReferenceMarkers gets a reference to the given []string and assigns it to the CrossReferenceMarkers field.
func (o *BilingualEntry) SetCrossReferenceMarkers(v []string) {
	o.CrossReferenceMarkers = &v
}

// GetCrossReferences returns the CrossReferences field value if set, zero value otherwise.
func (o *BilingualEntry) GetCrossReferences() []map[string]interface{} {
	if o == nil || o.CrossReferences == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.CrossReferences
}

// GetCrossReferencesOk returns a tuple with the CrossReferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualEntry) GetCrossReferencesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.CrossReferences == nil {
		return nil, false
	}
	return o.CrossReferences, true
}

// HasCrossReferences returns a boolean if a field has been set.
func (o *BilingualEntry) HasCrossReferences() bool {
	if o != nil && o.CrossReferences != nil {
		return true
	}

	return false
}

// SetCrossReferences gets a reference to the given []map[string]interface{} and assigns it to the CrossReferences field.
func (o *BilingualEntry) SetCrossReferences(v []map[string]interface{}) {
	o.CrossReferences = &v
}

// GetEtymologies returns the Etymologies field value if set, zero value otherwise.
func (o *BilingualEntry) GetEtymologies() []string {
	if o == nil || o.Etymologies == nil {
		var ret []string
		return ret
	}
	return *o.Etymologies
}

// GetEtymologiesOk returns a tuple with the Etymologies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualEntry) GetEtymologiesOk() (*[]string, bool) {
	if o == nil || o.Etymologies == nil {
		return nil, false
	}
	return o.Etymologies, true
}

// HasEtymologies returns a boolean if a field has been set.
func (o *BilingualEntry) HasEtymologies() bool {
	if o != nil && o.Etymologies != nil {
		return true
	}

	return false
}

// SetEtymologies gets a reference to the given []string and assigns it to the Etymologies field.
func (o *BilingualEntry) SetEtymologies(v []string) {
	o.Etymologies = &v
}

// GetGrammaticalFeatures returns the GrammaticalFeatures field value if set, zero value otherwise.
func (o *BilingualEntry) GetGrammaticalFeatures() []map[string]interface{} {
	if o == nil || o.GrammaticalFeatures == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.GrammaticalFeatures
}

// GetGrammaticalFeaturesOk returns a tuple with the GrammaticalFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualEntry) GetGrammaticalFeaturesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.GrammaticalFeatures == nil {
		return nil, false
	}
	return o.GrammaticalFeatures, true
}

// HasGrammaticalFeatures returns a boolean if a field has been set.
func (o *BilingualEntry) HasGrammaticalFeatures() bool {
	if o != nil && o.GrammaticalFeatures != nil {
		return true
	}

	return false
}

// SetGrammaticalFeatures gets a reference to the given []map[string]interface{} and assigns it to the GrammaticalFeatures field.
func (o *BilingualEntry) SetGrammaticalFeatures(v []map[string]interface{}) {
	o.GrammaticalFeatures = &v
}

// GetHomographNumber returns the HomographNumber field value if set, zero value otherwise.
func (o *BilingualEntry) GetHomographNumber() string {
	if o == nil || o.HomographNumber == nil {
		var ret string
		return ret
	}
	return *o.HomographNumber
}

// GetHomographNumberOk returns a tuple with the HomographNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualEntry) GetHomographNumberOk() (*string, bool) {
	if o == nil || o.HomographNumber == nil {
		return nil, false
	}
	return o.HomographNumber, true
}

// HasHomographNumber returns a boolean if a field has been set.
func (o *BilingualEntry) HasHomographNumber() bool {
	if o != nil && o.HomographNumber != nil {
		return true
	}

	return false
}

// SetHomographNumber gets a reference to the given string and assigns it to the HomographNumber field.
func (o *BilingualEntry) SetHomographNumber(v string) {
	o.HomographNumber = &v
}

// GetInflections returns the Inflections field value if set, zero value otherwise.
func (o *BilingualEntry) GetInflections() []InflectedForm {
	if o == nil || o.Inflections == nil {
		var ret []InflectedForm
		return ret
	}
	return *o.Inflections
}

// GetInflectionsOk returns a tuple with the Inflections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualEntry) GetInflectionsOk() (*[]InflectedForm, bool) {
	if o == nil || o.Inflections == nil {
		return nil, false
	}
	return o.Inflections, true
}

// HasInflections returns a boolean if a field has been set.
func (o *BilingualEntry) HasInflections() bool {
	if o != nil && o.Inflections != nil {
		return true
	}

	return false
}

// SetInflections gets a reference to the given []InflectedForm and assigns it to the Inflections field.
func (o *BilingualEntry) SetInflections(v []InflectedForm) {
	o.Inflections = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *BilingualEntry) GetNotes() []map[string]interface{} {
	if o == nil || o.Notes == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualEntry) GetNotesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *BilingualEntry) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []map[string]interface{} and assigns it to the Notes field.
func (o *BilingualEntry) SetNotes(v []map[string]interface{}) {
	o.Notes = &v
}

// GetPronunciations returns the Pronunciations field value if set, zero value otherwise.
func (o *BilingualEntry) GetPronunciations() []map[string]interface{} {
	if o == nil || o.Pronunciations == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Pronunciations
}

// GetPronunciationsOk returns a tuple with the Pronunciations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualEntry) GetPronunciationsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Pronunciations == nil {
		return nil, false
	}
	return o.Pronunciations, true
}

// HasPronunciations returns a boolean if a field has been set.
func (o *BilingualEntry) HasPronunciations() bool {
	if o != nil && o.Pronunciations != nil {
		return true
	}

	return false
}

// SetPronunciations gets a reference to the given []map[string]interface{} and assigns it to the Pronunciations field.
func (o *BilingualEntry) SetPronunciations(v []map[string]interface{}) {
	o.Pronunciations = &v
}

// GetSenses returns the Senses field value if set, zero value otherwise.
func (o *BilingualEntry) GetSenses() []BilingualSense {
	if o == nil || o.Senses == nil {
		var ret []BilingualSense
		return ret
	}
	return *o.Senses
}

// GetSensesOk returns a tuple with the Senses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualEntry) GetSensesOk() (*[]BilingualSense, bool) {
	if o == nil || o.Senses == nil {
		return nil, false
	}
	return o.Senses, true
}

// HasSenses returns a boolean if a field has been set.
func (o *BilingualEntry) HasSenses() bool {
	if o != nil && o.Senses != nil {
		return true
	}

	return false
}

// SetSenses gets a reference to the given []BilingualSense and assigns it to the Senses field.
func (o *BilingualEntry) SetSenses(v []BilingualSense) {
	o.Senses = &v
}

// GetVariantForms returns the VariantForms field value if set, zero value otherwise.
func (o *BilingualEntry) GetVariantForms() []map[string]interface{} {
	if o == nil || o.VariantForms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.VariantForms
}

// GetVariantFormsOk returns a tuple with the VariantForms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BilingualEntry) GetVariantFormsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.VariantForms == nil {
		return nil, false
	}
	return o.VariantForms, true
}

// HasVariantForms returns a boolean if a field has been set.
func (o *BilingualEntry) HasVariantForms() bool {
	if o != nil && o.VariantForms != nil {
		return true
	}

	return false
}

// SetVariantForms gets a reference to the given []map[string]interface{} and assigns it to the VariantForms field.
func (o *BilingualEntry) SetVariantForms(v []map[string]interface{}) {
	o.VariantForms = &v
}

func (o BilingualEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CrossReferenceMarkers != nil {
		toSerialize["crossReferenceMarkers"] = o.CrossReferenceMarkers
	}
	if o.CrossReferences != nil {
		toSerialize["crossReferences"] = o.CrossReferences
	}
	if o.Etymologies != nil {
		toSerialize["etymologies"] = o.Etymologies
	}
	if o.GrammaticalFeatures != nil {
		toSerialize["grammaticalFeatures"] = o.GrammaticalFeatures
	}
	if o.HomographNumber != nil {
		toSerialize["homographNumber"] = o.HomographNumber
	}
	if o.Inflections != nil {
		toSerialize["inflections"] = o.Inflections
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	if o.Pronunciations != nil {
		toSerialize["pronunciations"] = o.Pronunciations
	}
	if o.Senses != nil {
		toSerialize["senses"] = o.Senses
	}
	if o.VariantForms != nil {
		toSerialize["variantForms"] = o.VariantForms
	}
	return json.Marshal(toSerialize)
}

type NullableBilingualEntry struct {
	value *BilingualEntry
	isSet bool
}

func (v NullableBilingualEntry) Get() *BilingualEntry {
	return v.value
}

func (v *NullableBilingualEntry) Set(val *BilingualEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableBilingualEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableBilingualEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBilingualEntry(val *BilingualEntry) *NullableBilingualEntry {
	return &NullableBilingualEntry{value: val, isSet: true}
}

func (v NullableBilingualEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBilingualEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



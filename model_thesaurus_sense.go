/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// ThesaurusSense A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element
type ThesaurusSense struct {
	Antonyms *[]map[string]interface{} `json:"antonyms,omitempty"`
	DomainClasses *DomainClassesList `json:"domainClasses,omitempty"`
	Domains *DomainsList `json:"domains,omitempty"`
	// A list of written or spoken rendering of examples of use of a word or text
	Examples *[]map[string]interface{} `json:"examples,omitempty"`
	// The id of the sense that is required for the delete procedure
	Id *string `json:"id,omitempty"`
	Regions *RegionsList `json:"regions,omitempty"`
	Registers *RegistersList `json:"registers,omitempty"`
	SemanticClasses *SemanticClassesList `json:"semanticClasses,omitempty"`
	// subsenses of word
	Subsenses *[]ThesaurusSense `json:"subsenses,omitempty"`
	Synonyms *[]map[string]interface{} `json:"synonyms,omitempty"`
}

// NewThesaurusSense instantiates a new ThesaurusSense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThesaurusSense() *ThesaurusSense {
	this := ThesaurusSense{}
	return &this
}

// NewThesaurusSenseWithDefaults instantiates a new ThesaurusSense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThesaurusSenseWithDefaults() *ThesaurusSense {
	this := ThesaurusSense{}
	return &this
}

// GetAntonyms returns the Antonyms field value if set, zero value otherwise.
func (o *ThesaurusSense) GetAntonyms() []map[string]interface{} {
	if o == nil || o.Antonyms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Antonyms
}

// GetAntonymsOk returns a tuple with the Antonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusSense) GetAntonymsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Antonyms == nil {
		return nil, false
	}
	return o.Antonyms, true
}

// HasAntonyms returns a boolean if a field has been set.
func (o *ThesaurusSense) HasAntonyms() bool {
	if o != nil && o.Antonyms != nil {
		return true
	}

	return false
}

// SetAntonyms gets a reference to the given []map[string]interface{} and assigns it to the Antonyms field.
func (o *ThesaurusSense) SetAntonyms(v []map[string]interface{}) {
	o.Antonyms = &v
}

// GetDomainClasses returns the DomainClasses field value if set, zero value otherwise.
func (o *ThesaurusSense) GetDomainClasses() DomainClassesList {
	if o == nil || o.DomainClasses == nil {
		var ret DomainClassesList
		return ret
	}
	return *o.DomainClasses
}

// GetDomainClassesOk returns a tuple with the DomainClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusSense) GetDomainClassesOk() (*DomainClassesList, bool) {
	if o == nil || o.DomainClasses == nil {
		return nil, false
	}
	return o.DomainClasses, true
}

// HasDomainClasses returns a boolean if a field has been set.
func (o *ThesaurusSense) HasDomainClasses() bool {
	if o != nil && o.DomainClasses != nil {
		return true
	}

	return false
}

// SetDomainClasses gets a reference to the given DomainClassesList and assigns it to the DomainClasses field.
func (o *ThesaurusSense) SetDomainClasses(v DomainClassesList) {
	o.DomainClasses = &v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *ThesaurusSense) GetDomains() DomainsList {
	if o == nil || o.Domains == nil {
		var ret DomainsList
		return ret
	}
	return *o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusSense) GetDomainsOk() (*DomainsList, bool) {
	if o == nil || o.Domains == nil {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *ThesaurusSense) HasDomains() bool {
	if o != nil && o.Domains != nil {
		return true
	}

	return false
}

// SetDomains gets a reference to the given DomainsList and assigns it to the Domains field.
func (o *ThesaurusSense) SetDomains(v DomainsList) {
	o.Domains = &v
}

// GetExamples returns the Examples field value if set, zero value otherwise.
func (o *ThesaurusSense) GetExamples() []map[string]interface{} {
	if o == nil || o.Examples == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Examples
}

// GetExamplesOk returns a tuple with the Examples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusSense) GetExamplesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Examples == nil {
		return nil, false
	}
	return o.Examples, true
}

// HasExamples returns a boolean if a field has been set.
func (o *ThesaurusSense) HasExamples() bool {
	if o != nil && o.Examples != nil {
		return true
	}

	return false
}

// SetExamples gets a reference to the given []map[string]interface{} and assigns it to the Examples field.
func (o *ThesaurusSense) SetExamples(v []map[string]interface{}) {
	o.Examples = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ThesaurusSense) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusSense) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ThesaurusSense) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ThesaurusSense) SetId(v string) {
	o.Id = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *ThesaurusSense) GetRegions() RegionsList {
	if o == nil || o.Regions == nil {
		var ret RegionsList
		return ret
	}
	return *o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusSense) GetRegionsOk() (*RegionsList, bool) {
	if o == nil || o.Regions == nil {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *ThesaurusSense) HasRegions() bool {
	if o != nil && o.Regions != nil {
		return true
	}

	return false
}

// SetRegions gets a reference to the given RegionsList and assigns it to the Regions field.
func (o *ThesaurusSense) SetRegions(v RegionsList) {
	o.Regions = &v
}

// GetRegisters returns the Registers field value if set, zero value otherwise.
func (o *ThesaurusSense) GetRegisters() RegistersList {
	if o == nil || o.Registers == nil {
		var ret RegistersList
		return ret
	}
	return *o.Registers
}

// GetRegistersOk returns a tuple with the Registers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusSense) GetRegistersOk() (*RegistersList, bool) {
	if o == nil || o.Registers == nil {
		return nil, false
	}
	return o.Registers, true
}

// HasRegisters returns a boolean if a field has been set.
func (o *ThesaurusSense) HasRegisters() bool {
	if o != nil && o.Registers != nil {
		return true
	}

	return false
}

// SetRegisters gets a reference to the given RegistersList and assigns it to the Registers field.
func (o *ThesaurusSense) SetRegisters(v RegistersList) {
	o.Registers = &v
}

// GetSemanticClasses returns the SemanticClasses field value if set, zero value otherwise.
func (o *ThesaurusSense) GetSemanticClasses() SemanticClassesList {
	if o == nil || o.SemanticClasses == nil {
		var ret SemanticClassesList
		return ret
	}
	return *o.SemanticClasses
}

// GetSemanticClassesOk returns a tuple with the SemanticClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusSense) GetSemanticClassesOk() (*SemanticClassesList, bool) {
	if o == nil || o.SemanticClasses == nil {
		return nil, false
	}
	return o.SemanticClasses, true
}

// HasSemanticClasses returns a boolean if a field has been set.
func (o *ThesaurusSense) HasSemanticClasses() bool {
	if o != nil && o.SemanticClasses != nil {
		return true
	}

	return false
}

// SetSemanticClasses gets a reference to the given SemanticClassesList and assigns it to the SemanticClasses field.
func (o *ThesaurusSense) SetSemanticClasses(v SemanticClassesList) {
	o.SemanticClasses = &v
}

// GetSubsenses returns the Subsenses field value if set, zero value otherwise.
func (o *ThesaurusSense) GetSubsenses() []ThesaurusSense {
	if o == nil || o.Subsenses == nil {
		var ret []ThesaurusSense
		return ret
	}
	return *o.Subsenses
}

// GetSubsensesOk returns a tuple with the Subsenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusSense) GetSubsensesOk() (*[]ThesaurusSense, bool) {
	if o == nil || o.Subsenses == nil {
		return nil, false
	}
	return o.Subsenses, true
}

// HasSubsenses returns a boolean if a field has been set.
func (o *ThesaurusSense) HasSubsenses() bool {
	if o != nil && o.Subsenses != nil {
		return true
	}

	return false
}

// SetSubsenses gets a reference to the given []ThesaurusSense and assigns it to the Subsenses field.
func (o *ThesaurusSense) SetSubsenses(v []ThesaurusSense) {
	o.Subsenses = &v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *ThesaurusSense) GetSynonyms() []map[string]interface{} {
	if o == nil || o.Synonyms == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThesaurusSense) GetSynonymsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Synonyms == nil {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *ThesaurusSense) HasSynonyms() bool {
	if o != nil && o.Synonyms != nil {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given []map[string]interface{} and assigns it to the Synonyms field.
func (o *ThesaurusSense) SetSynonyms(v []map[string]interface{}) {
	o.Synonyms = &v
}

func (o ThesaurusSense) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Antonyms != nil {
		toSerialize["antonyms"] = o.Antonyms
	}
	if o.DomainClasses != nil {
		toSerialize["domainClasses"] = o.DomainClasses
	}
	if o.Domains != nil {
		toSerialize["domains"] = o.Domains
	}
	if o.Examples != nil {
		toSerialize["examples"] = o.Examples
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Regions != nil {
		toSerialize["regions"] = o.Regions
	}
	if o.Registers != nil {
		toSerialize["registers"] = o.Registers
	}
	if o.SemanticClasses != nil {
		toSerialize["semanticClasses"] = o.SemanticClasses
	}
	if o.Subsenses != nil {
		toSerialize["subsenses"] = o.Subsenses
	}
	if o.Synonyms != nil {
		toSerialize["synonyms"] = o.Synonyms
	}
	return json.Marshal(toSerialize)
}

type NullableThesaurusSense struct {
	value *ThesaurusSense
	isSet bool
}

func (v NullableThesaurusSense) Get() *ThesaurusSense {
	return v.value
}

func (v *NullableThesaurusSense) Set(val *ThesaurusSense) {
	v.value = val
	v.isSet = true
}

func (v NullableThesaurusSense) IsSet() bool {
	return v.isSet
}

func (v *NullableThesaurusSense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThesaurusSense(val *ThesaurusSense) *NullableThesaurusSense {
	return &NullableThesaurusSense{value: val, isSet: true}
}

func (v NullableThesaurusSense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThesaurusSense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// LanguagesSourceLanguage Source language of the results
type LanguagesSourceLanguage struct {
	// IANA language code
	Id *string `json:"id,omitempty"`
	// Language label.
	Language *string `json:"language,omitempty"`
}

// NewLanguagesSourceLanguage instantiates a new LanguagesSourceLanguage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguagesSourceLanguage() *LanguagesSourceLanguage {
	this := LanguagesSourceLanguage{}
	return &this
}

// NewLanguagesSourceLanguageWithDefaults instantiates a new LanguagesSourceLanguage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguagesSourceLanguageWithDefaults() *LanguagesSourceLanguage {
	this := LanguagesSourceLanguage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LanguagesSourceLanguage) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguagesSourceLanguage) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LanguagesSourceLanguage) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LanguagesSourceLanguage) SetId(v string) {
	o.Id = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *LanguagesSourceLanguage) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguagesSourceLanguage) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *LanguagesSourceLanguage) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *LanguagesSourceLanguage) SetLanguage(v string) {
	o.Language = &v
}

func (o LanguagesSourceLanguage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	return json.Marshal(toSerialize)
}

type NullableLanguagesSourceLanguage struct {
	value *LanguagesSourceLanguage
	isSet bool
}

func (v NullableLanguagesSourceLanguage) Get() *LanguagesSourceLanguage {
	return v.value
}

func (v *NullableLanguagesSourceLanguage) Set(val *LanguagesSourceLanguage) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguagesSourceLanguage) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguagesSourceLanguage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguagesSourceLanguage(val *LanguagesSourceLanguage) *NullableLanguagesSourceLanguage {
	return &NullableLanguagesSourceLanguage{value: val, isSet: true}
}

func (v NullableLanguagesSourceLanguage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguagesSourceLanguage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



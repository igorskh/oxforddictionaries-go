/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// EntriesApiService EntriesApi service
type EntriesApiService service

type ApiEntriesSourceLangWordIdGetRequest struct {
	ctx _context.Context
	ApiService *EntriesApiService
	sourceLang string
	wordId string
	appId *string
	appKey *string
	fields *[]string
	grammaticalFeatures *string
	lexicalCategory *string
	domains *string
	registers *string
	strictMatch *bool
}

func (r ApiEntriesSourceLangWordIdGetRequest) AppId(appId string) ApiEntriesSourceLangWordIdGetRequest {
	r.appId = &appId
	return r
}
func (r ApiEntriesSourceLangWordIdGetRequest) AppKey(appKey string) ApiEntriesSourceLangWordIdGetRequest {
	r.appKey = &appKey
	return r
}
func (r ApiEntriesSourceLangWordIdGetRequest) Fields(fields []string) ApiEntriesSourceLangWordIdGetRequest {
	r.fields = &fields
	return r
}
func (r ApiEntriesSourceLangWordIdGetRequest) GrammaticalFeatures(grammaticalFeatures string) ApiEntriesSourceLangWordIdGetRequest {
	r.grammaticalFeatures = &grammaticalFeatures
	return r
}
func (r ApiEntriesSourceLangWordIdGetRequest) LexicalCategory(lexicalCategory string) ApiEntriesSourceLangWordIdGetRequest {
	r.lexicalCategory = &lexicalCategory
	return r
}
func (r ApiEntriesSourceLangWordIdGetRequest) Domains(domains string) ApiEntriesSourceLangWordIdGetRequest {
	r.domains = &domains
	return r
}
func (r ApiEntriesSourceLangWordIdGetRequest) Registers(registers string) ApiEntriesSourceLangWordIdGetRequest {
	r.registers = &registers
	return r
}
func (r ApiEntriesSourceLangWordIdGetRequest) StrictMatch(strictMatch bool) ApiEntriesSourceLangWordIdGetRequest {
	r.strictMatch = &strictMatch
	return r
}

func (r ApiEntriesSourceLangWordIdGetRequest) Execute() (RetrieveEntry, *_nethttp.Response, error) {
	return r.ApiService.EntriesSourceLangWordIdGetExecute(r)
}

/*
 * EntriesSourceLangWordIdGet Retrieve dictionary information for a given word
 * 
Use this to retrieve definitions, [pronunciations](documentation/glossary?term=pronunciation), example sentences, [grammatical information](documentation/glossary?term=grammaticalfeatures) and [word origins](documentation/glossary?term=etymology).

TIP: Entries ONLY works for dictionary headwords. You may need to use the Lemmas endpoint first to link an inflected form back to its headword (e.g., pixels --> pixel). Alternatively, you can use the Words endpoint, a feature that enables you to retrieve definitions, pronunciations, word origins, and grammatical data across headwords and inflected words with just one call to the API.

Use filters to limit the [entry](documentation/glossary?term=entry) information that is returned. For example, you may only require definitions and not everything else, or just [pronunciations](documentation/glossary?term=pronunciation). The full list of filters can be retrieved from the filters Utility endpoint. You can also specify values within the filter using '='. For example 'grammaticalFeatures=singular'. Filters can also be combined.

Combining different filters will build a query using 'AND' operators, while if a filter contains more than one value it will build a query using 'OR' operators. For example, a combination of filters like '?grammaticalFeatures=singular&lexicalCategory=noun,verb' will return entries which match the query ('noun' OR 'verb') AND 'singular'.

<div id="dictionary_entries_filters"></div>

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sourceLang Language code of the source language in a monolingual dataset.
 * @param wordId The identifier for an Entry (case-sensitive).
 * @return ApiEntriesSourceLangWordIdGetRequest
 */
func (a *EntriesApiService) EntriesSourceLangWordIdGet(ctx _context.Context, sourceLang string, wordId string) ApiEntriesSourceLangWordIdGetRequest {
	return ApiEntriesSourceLangWordIdGetRequest{
		ApiService: a,
		ctx: ctx,
		sourceLang: sourceLang,
		wordId: wordId,
	}
}

/*
 * Execute executes the request
 * @return RetrieveEntry
 */
func (a *EntriesApiService) EntriesSourceLangWordIdGetExecute(r ApiEntriesSourceLangWordIdGetRequest) (RetrieveEntry, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RetrieveEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntriesApiService.EntriesSourceLangWordIdGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/entries/{source_lang}/{word_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"source_lang"+"}", _neturl.PathEscape(parameterToString(r.sourceLang, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"word_id"+"}", _neturl.PathEscape(parameterToString(r.wordId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.appId == nil {
		return localVarReturnValue, nil, reportError("appId is required and must be specified")
	}
	if r.appKey == nil {
		return localVarReturnValue, nil, reportError("appKey is required and must be specified")
	}

	if r.fields != nil {
		localVarQueryParams.Add("fields", parameterToString(*r.fields, "csv"))
	}
	if r.grammaticalFeatures != nil {
		localVarQueryParams.Add("grammaticalFeatures", parameterToString(*r.grammaticalFeatures, ""))
	}
	if r.lexicalCategory != nil {
		localVarQueryParams.Add("lexicalCategory", parameterToString(*r.lexicalCategory, ""))
	}
	if r.domains != nil {
		localVarQueryParams.Add("domains", parameterToString(*r.domains, ""))
	}
	if r.registers != nil {
		localVarQueryParams.Add("registers", parameterToString(*r.registers, ""))
	}
	if r.strictMatch != nil {
		localVarQueryParams.Add("strictMatch", parameterToString(*r.strictMatch, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["app_id"] = parameterToString(*r.appId, "")
	localVarHeaderParams["app_key"] = parameterToString(*r.appKey, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 414 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// SentencesLexicalEntry Description of an entry for a particular part of speech
type SentencesLexicalEntry struct {
	// The different forms are correlated with meanings or functions which we text as 'features'
	GrammaticalFeatures *[]map[string]interface{} `json:"grammaticalFeatures,omitempty"`
	// IANA language code
	Language string `json:"language"`
	LexicalCategory *LexicalCategory `json:"lexicalCategory,omitempty"`
	// A list of written or spoken rendering of examples of use of a word or text
	Sentences []map[string]interface{} `json:"sentences"`
	// A given written or spoken realisation of an entry.
	Text string `json:"text"`
}

// NewSentencesLexicalEntry instantiates a new SentencesLexicalEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSentencesLexicalEntry(language string, sentences []map[string]interface{}, text string) *SentencesLexicalEntry {
	this := SentencesLexicalEntry{}
	this.Language = language
	this.Sentences = sentences
	this.Text = text
	return &this
}

// NewSentencesLexicalEntryWithDefaults instantiates a new SentencesLexicalEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSentencesLexicalEntryWithDefaults() *SentencesLexicalEntry {
	this := SentencesLexicalEntry{}
	return &this
}

// GetGrammaticalFeatures returns the GrammaticalFeatures field value if set, zero value otherwise.
func (o *SentencesLexicalEntry) GetGrammaticalFeatures() []map[string]interface{} {
	if o == nil || o.GrammaticalFeatures == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.GrammaticalFeatures
}

// GetGrammaticalFeaturesOk returns a tuple with the GrammaticalFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SentencesLexicalEntry) GetGrammaticalFeaturesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.GrammaticalFeatures == nil {
		return nil, false
	}
	return o.GrammaticalFeatures, true
}

// HasGrammaticalFeatures returns a boolean if a field has been set.
func (o *SentencesLexicalEntry) HasGrammaticalFeatures() bool {
	if o != nil && o.GrammaticalFeatures != nil {
		return true
	}

	return false
}

// SetGrammaticalFeatures gets a reference to the given []map[string]interface{} and assigns it to the GrammaticalFeatures field.
func (o *SentencesLexicalEntry) SetGrammaticalFeatures(v []map[string]interface{}) {
	o.GrammaticalFeatures = &v
}

// GetLanguage returns the Language field value
func (o *SentencesLexicalEntry) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *SentencesLexicalEntry) GetLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *SentencesLexicalEntry) SetLanguage(v string) {
	o.Language = v
}

// GetLexicalCategory returns the LexicalCategory field value if set, zero value otherwise.
func (o *SentencesLexicalEntry) GetLexicalCategory() LexicalCategory {
	if o == nil || o.LexicalCategory == nil {
		var ret LexicalCategory
		return ret
	}
	return *o.LexicalCategory
}

// GetLexicalCategoryOk returns a tuple with the LexicalCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SentencesLexicalEntry) GetLexicalCategoryOk() (*LexicalCategory, bool) {
	if o == nil || o.LexicalCategory == nil {
		return nil, false
	}
	return o.LexicalCategory, true
}

// HasLexicalCategory returns a boolean if a field has been set.
func (o *SentencesLexicalEntry) HasLexicalCategory() bool {
	if o != nil && o.LexicalCategory != nil {
		return true
	}

	return false
}

// SetLexicalCategory gets a reference to the given LexicalCategory and assigns it to the LexicalCategory field.
func (o *SentencesLexicalEntry) SetLexicalCategory(v LexicalCategory) {
	o.LexicalCategory = &v
}

// GetSentences returns the Sentences field value
func (o *SentencesLexicalEntry) GetSentences() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Sentences
}

// GetSentencesOk returns a tuple with the Sentences field value
// and a boolean to check if the value has been set.
func (o *SentencesLexicalEntry) GetSentencesOk() (*[]map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Sentences, true
}

// SetSentences sets field value
func (o *SentencesLexicalEntry) SetSentences(v []map[string]interface{}) {
	o.Sentences = v
}

// GetText returns the Text field value
func (o *SentencesLexicalEntry) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *SentencesLexicalEntry) GetTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *SentencesLexicalEntry) SetText(v string) {
	o.Text = v
}

func (o SentencesLexicalEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GrammaticalFeatures != nil {
		toSerialize["grammaticalFeatures"] = o.GrammaticalFeatures
	}
	if true {
		toSerialize["language"] = o.Language
	}
	if o.LexicalCategory != nil {
		toSerialize["lexicalCategory"] = o.LexicalCategory
	}
	if true {
		toSerialize["sentences"] = o.Sentences
	}
	if true {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableSentencesLexicalEntry struct {
	value *SentencesLexicalEntry
	isSet bool
}

func (v NullableSentencesLexicalEntry) Get() *SentencesLexicalEntry {
	return v.value
}

func (v *NullableSentencesLexicalEntry) Set(val *SentencesLexicalEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableSentencesLexicalEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableSentencesLexicalEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSentencesLexicalEntry(val *SentencesLexicalEntry) *NullableSentencesLexicalEntry {
	return &NullableSentencesLexicalEntry{value: val, isSet: true}
}

func (v NullableSentencesLexicalEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSentencesLexicalEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



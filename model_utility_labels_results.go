/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 2.5.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package oxforddictionaries

import (
	"encoding/json"
)

// UtilityLabelsResults the list of labels for an object. Every object can be a lexical category, or a register, or a domain.
type UtilityLabelsResults struct {
	// Label in English
	En *string `json:"en,omitempty"`
}

// NewUtilityLabelsResults instantiates a new UtilityLabelsResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtilityLabelsResults() *UtilityLabelsResults {
	this := UtilityLabelsResults{}
	return &this
}

// NewUtilityLabelsResultsWithDefaults instantiates a new UtilityLabelsResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtilityLabelsResultsWithDefaults() *UtilityLabelsResults {
	this := UtilityLabelsResults{}
	return &this
}

// GetEn returns the En field value if set, zero value otherwise.
func (o *UtilityLabelsResults) GetEn() string {
	if o == nil || o.En == nil {
		var ret string
		return ret
	}
	return *o.En
}

// GetEnOk returns a tuple with the En field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtilityLabelsResults) GetEnOk() (*string, bool) {
	if o == nil || o.En == nil {
		return nil, false
	}
	return o.En, true
}

// HasEn returns a boolean if a field has been set.
func (o *UtilityLabelsResults) HasEn() bool {
	if o != nil && o.En != nil {
		return true
	}

	return false
}

// SetEn gets a reference to the given string and assigns it to the En field.
func (o *UtilityLabelsResults) SetEn(v string) {
	o.En = &v
}

func (o UtilityLabelsResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.En != nil {
		toSerialize["en"] = o.En
	}
	return json.Marshal(toSerialize)
}

type NullableUtilityLabelsResults struct {
	value *UtilityLabelsResults
	isSet bool
}

func (v NullableUtilityLabelsResults) Get() *UtilityLabelsResults {
	return v.value
}

func (v *NullableUtilityLabelsResults) Set(val *UtilityLabelsResults) {
	v.value = val
	v.isSet = true
}

func (v NullableUtilityLabelsResults) IsSet() bool {
	return v.isSet
}

func (v *NullableUtilityLabelsResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtilityLabelsResults(val *UtilityLabelsResults) *NullableUtilityLabelsResults {
	return &NullableUtilityLabelsResults{value: val, isSet: true}
}

func (v NullableUtilityLabelsResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtilityLabelsResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


